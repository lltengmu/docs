import{_ as a,c as i,o as e,ae as p}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"linux 系统软件的安装","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/11.linux 系统软件的安装.md","filePath":"server/linux/11.linux 系统软件的安装.md","lastUpdated":1734757381000}'),n={name:"server/linux/11.linux 系统软件的安装.md"};function t(l,s,d,c,h,o){return e(),i("div",null,s[0]||(s[0]=[p(`<h1 id="linux-系统软件的安装" tabindex="-1">linux 系统软件的安装 <a class="header-anchor" href="#linux-系统软件的安装" aria-label="Permalink to &quot;linux 系统软件的安装&quot;">​</a></h1><p>不管是什么系统，安装软件都有多种方式。而linux软件的安装稍微复杂。</p><p>linux 软件安装复杂主要体现在软件的依赖文件上，也叫做依赖包，要想安装某个软件，需要先安装它的依赖包。</p><h2 id="编译安装" tabindex="-1">编译安装 <a class="header-anchor" href="#编译安装" aria-label="Permalink to &quot;编译安装&quot;">​</a></h2><p>我们有时候安装软件，下载下来的是软件源代码，不能直接运行，需要编译之后才能运行，源代码 &gt; 编译 &gt; 二进制机器码，才能运行。</p><p>编译安装nginx的示例:</p><ol><li><p>下载源代码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -o nginx.tar.gz http://nginx.org/download/nginx-1.20.1.tar.gz</span></span></code></pre></div></li><li><p>编译安装</p><ol><li><p>解压文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tar xf nginx.tar.gz</span></span></code></pre></div></li><li><p>切换到软件目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd nginx-1.20.1/</span></span></code></pre></div></li><li><p>配置编译参数</p><p>这个软件给我们提供了很多功能，我们在编译过程中可以选择需要哪些功能，哪些功能不需要。所有功能都要就是完整版，有些功能不要就是精简版。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./configure --prefix=/usr/local/nginx --without-pcre --withouthttp_rewrite_module --without-http_gzip_module</span></span></code></pre></div><p><code>--without</code>：去掉某些功能</p><p><code>--prefix</code>：指定软件的安装目录，不存在的话会自动创建。</p><p><code>./configure</code>： 是使用相对路径执行这个文件（这是一个可执行文件，在linux系统中，如果一个可执行文件没有被注册的话，可以使用相对路径执行该文件）。</p><p>这个指令执行之后，会自动检查各种依赖环境是否满足软件运行的要求，检查通过之后会生成一个叫做<code>Makefile</code>的文件。其实还会生成<code>objs</code>文件，但主要是<code>Makefile</code>文件</p></li><li><p>编译</p><p>使用<code>make</code>指令进行编译。</p><p><code>make</code> 会找到当前目录中的<code>Makefile</code>文件来进行编译，这个编译过程一般是比价长的。具体时长取决于：</p><ul><li>CPU性能</li><li>软件功能复杂度</li></ul><p>编译之后在<code>objs</code>文件中会多一些文件，其中的<code>nginx</code>文件就是二进制可执行的文件。</p><p>可以查看<code>nginx</code>的版本:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span></code></pre></div><p>到这里只是编译完成，还需要进行安装。因为在编译过程中指定了安装路径，所以需要切换到<code>/usr/local/nginx</code>目录。</p></li><li><p>安装</p><p>查看目录结构:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├── conf  # 该软件的配置文件所在目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── fastcgi.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── fastcgi.conf.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── fastcgi_params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── fastcgi_params.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── koi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── koi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── mime.types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── mime.types.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── nginx.conf.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── scgi_params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── scgi_params.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── uwsgi_params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── uwsgi_params.default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   └── win</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├── html  # 网站源代码存放目录，这个nginx其实主要是用来部署网站的，网站的代码可以放到这个目录中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   ├── 50x.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   │   └── index.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ├── logs  # 这个软件自带日志记录功能，记录的日志存放在这个目录中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └── sbin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       └── nginx</span></span></code></pre></div><p>运行指令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/usr/local/nginx/sbin/nginx</span></span></code></pre></div><p>因为没有配置环境变量，所以需要绝对路径执行。</p><p>关闭防火墙：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop firewalld</span></span></code></pre></div><p>使用浏览器访问:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://ip地址/</span></span></code></pre></div><p>就可以看到网站了。</p></li></ol></li></ol><h2 id="rmp-安装" tabindex="-1">rmp 安装 <a class="header-anchor" href="#rmp-安装" aria-label="Permalink to &quot;rmp 安装&quot;">​</a></h2><p>编译安装时比价繁琐的。为了方便使用者，一般都会编译之后发给使用者，用起来就不需要编译，会方便很多。只要有人编译过一次，直接将编译后的程序发布出来，供使用者下载即可。下载软件需要使用到对应系统的包管理工具。</p><p><code>redhat</code>系打出来的包叫做：<code>rpm</code>包，用<code>yum</code>安装的程序包其实都是<code>rpm</code>包，<code>rpm</code>的包我们也可以不使用<code>yum</code>而手动安装。</p><h4 id="手动安装过程" tabindex="-1">手动安装过程 <a class="header-anchor" href="#手动安装过程" aria-label="Permalink to &quot;手动安装过程&quot;">​</a></h4><ol><li><p>先安装<code>wget</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum install wget -y</span></span></code></pre></div></li><li><p>使用<code>wget</code>下载<code>rpm</code>包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wget https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/Packages/tree-1.6.0-10.el7.x86_64.rpm</span></span></code></pre></div></li><li><p>安装rpm包 #rpm -i是安装，vh是显示安装进度条的意思。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rpm -ivh tree-1.6.0-10.el7.x86_64.rpm</span></span></code></pre></div></li><li><p>卸载</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rpm -e 包名</span></span></code></pre></div></li><li><p>升级</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rpm -Uvh xxx.rpm</span></span></code></pre></div></li><li><p>查看已安装的软件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rpm -qa|grep httpd</span></span></code></pre></div></li></ol><p>rpm安装软件个小问题：</p><p>比如：安装vim，会提示安装失败，需要各种依赖包，需要先去安装依赖包。</p><p>所以，用rpm安装软件不好解决依赖包的问题，所以出来了下面的yum安装方式，自动下载安装需要的</p><p>依赖包。以后都用yum来安装。</p><h2 id="yum-安装" tabindex="-1">yum 安装 <a class="header-anchor" href="#yum-安装" aria-label="Permalink to &quot;yum 安装&quot;">​</a></h2><p>使用<code>yum</code>可以结局<code>rpm</code>依赖的问题。</p><p>安装扩展<code>yum</code>库：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum install epel-release -y</span></span></code></pre></div><p><code>yum</code>安装<code>nginx</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum install nginx -y</span></span></code></pre></div><p><code>yum</code>移除<code>nginx</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum remove nginx -y</span></span></code></pre></div><p>查看仓库<code>rpm</code>的数量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum repolist</span></span></code></pre></div>`,26)]))}const k=a(n,[["render",t]]);export{g as __pageData,k as default};
