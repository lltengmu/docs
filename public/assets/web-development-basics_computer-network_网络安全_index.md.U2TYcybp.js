import{_ as o,c as r,o as s,ae as n}from"./chunks/framework.Dh1jimFm.js";const p="/assets/clipboard-1.BAFlmrTl.png",e="/assets/clipboard-2.CoImzdyP.png",g="/assets/clipboard-3.Bl5pKLNs.png",_=JSON.parse('{"title":"网络安全","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/computer-network/网络安全/index.md","filePath":"web-development-basics/computer-network/网络安全/index.md","lastUpdated":null}'),l={name:"web-development-basics/computer-network/网络安全/index.md"};function a(i,t,d,c,h,S){return s(),r("div",null,t[0]||(t[0]=[n('<h1 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h1><h2 id="_7-1-网络安全问题概述" tabindex="-1">7.1 网络安全问题概述 <a class="header-anchor" href="#_7-1-网络安全问题概述" aria-label="Permalink to &quot;7.1 网络安全问题概述&quot;">​</a></h2><p><strong>7.1.1 计算机网络面临的安全性威胁</strong></p><p>计算机网络上的通信面临的威胁可以分为<strong>两大类</strong>：被动攻击（如<strong>截获</strong>）和主动攻击（如<strong>中断、篡改、伪造</strong>）。</p><p><strong>7.1.2 安全的计算机网络</strong></p><p>安全的计算机网络应该达到：<strong>保密性、端点鉴别、信息的完整性、运行的安全性</strong>。</p><p><strong>7.1.3 数据加密模型</strong></p><p>密码学包括密码编码学（设计密码体制）和密码分析学（破解密码）。</p><p>无条件安全的密码几乎不存在，大部分密码都是<strong>计算上安全</strong>的，即<strong>在一定时间内是不可破解的</strong>。</p><h2 id="_7-2-两类密码体制" tabindex="-1">7.2 两类密码体制 <a class="header-anchor" href="#_7-2-两类密码体制" aria-label="Permalink to &quot;7.2 两类密码体制&quot;">​</a></h2><p><strong>7.2.1 对称密钥密码体制</strong></p><p><strong>对称密钥密码体制</strong>中加密密钥与解密密钥是相同的。这种加密的保密性<strong>仅取决于对密钥的保密</strong>，算法是公开的。</p><p><strong>数据加密标准 DES</strong> 是一种对称密钥密码体制。初版的 DES 已经不安全，目前采用的是<strong>三重 DES（3DES）</strong>。三重 DES 广泛用于网络、金融、信用卡等系统。</p><p><strong>7.2.2 公钥密码体制</strong></p><p><strong>公钥密码体制</strong>中加密密钥是公开的（<strong>公钥</strong>），<strong>解密密钥是保密的（私钥）</strong>，加密和解密算法也是公开的。</p><p>私钥是某个用户私有的，对其他人都保密。</p><p>公钥密码体制相对于对称密钥体制的<strong>优点：</strong></p><ol><li>不需要考虑密钥分配问题：对称密钥需要安全地分配密钥。</li><li><strong>提供数字签名功能。</strong></li></ol><p><strong>RSA 体制（RSA 公钥加密算法）<strong>是最著名的公钥密码体制，它采用了数论中的</strong>大数分解问题</strong>。</p><p>任何加密方法的安全性取决于密钥的长度和攻破密文所需的计算量，而非体制。</p><h2 id="_7-3-数字签名" tabindex="-1">7.3 数字签名 <a class="header-anchor" href="#_7-3-数字签名" aria-label="Permalink to &quot;7.3 数字签名&quot;">​</a></h2><p><strong>数字签名需要提供三点功能：</strong></p><ol><li><strong>报文鉴别</strong>：接收者能够核实发送者对报文的签名，从而验证发送者的身份。</li><li><strong>报文的完整性</strong>：接收者确信收到的数据和发送者发送的数据完全一样。</li><li><strong>不可否认</strong>：发送者事后不能否认自己对报文的签名。</li></ol><p>基于公钥密码体制数字签名功**实现方法：**发送者使用自己的私钥对一段报文进行加密，接收者使用该发送者的公钥来解密报文。</p><h2 id="_7-4-鉴别" tabindex="-1">7.4 鉴别 <a class="header-anchor" href="#_7-4-鉴别" aria-label="Permalink to &quot;7.4 鉴别&quot;">​</a></h2><p>鉴别是要验证通信对方是自己要通信的对象。</p><p><strong>7.4.1 报文鉴别</strong></p><p><strong>报文鉴别</strong>用来鉴别报文的完整性，它采用了<strong>密码散列函数</strong>。</p><p><strong>散列函数的两个特点：</strong></p><ol><li>输入长度可以很长，输出长度则较短并长度固定。散列函数的输出叫做散列值。</li><li>不同的散列值肯定对应不同的输入，但不同的输入可能得到相同的散列值。</li></ol><p>密码学中的散列函数<strong>最重要的特点是：要找到两个不同的报文具有相同的散列值，在计算上是不可行的</strong>。也就是根据散列值来求报文的逆向变换是不可能的。</p><p><strong>报文摘要 MD5</strong> 是进行报文鉴别的一种简单方法，但目前广泛使用的是<strong>安全散列算法 SHA-2/3</strong>。</p><p>散列函数的使用方法：对报文计算出散列值，将散列值附加在报文后面，将附加了散列值的整个报文加密进行发送。接收方解密后重新对报文计算散列值，如果与收到的散列值相同就没问题。</p><p><strong>7.4.2 实体鉴别</strong></p><p>报文鉴别对每一个收到的报文都要鉴别发送者，<strong>实体鉴别</strong>只需要在整个连接的过程中鉴别一次。这种不同带来了微妙的影响。</p><p><strong>重放攻击</strong></p><p>场景：A 向 B 发送带有自己身份和口令的报文，并使用对称密钥加密。B 收到报文后用对称密钥解密，鉴别 A 的身份。</p><p>但是 C 可能截获 A 发出的报文并转发给 B，这样 B 就会误认为 C 是 A，之后向 C 发送了许多本该发给 A 的报文。</p><p><strong>不重数法</strong></p><p>可以采用一个不重复使用的大随机数来解决<strong>重放攻击</strong>。A 向 B 发送不重数（即<strong>不同会话使用不同的数</strong>），这样 C 截获后再向 B 发送，B 发现收到的是重复的，就不会被骗了。</p><h2 id="_7-5-密钥分配" tabindex="-1">7.5 密钥分配 <a class="header-anchor" href="#_7-5-密钥分配" aria-label="Permalink to &quot;7.5 密钥分配&quot;">​</a></h2><p>密钥分配即密钥分发，是密钥管理中最大的问题，密钥必须通过最安全的通路进行分配。</p><p><strong>7.5.1 对称密钥的分配</strong></p><p>目前常用的密钥分配方式是设立<strong>密钥分配中心 KDC</strong>。</p><p><strong>7.5.2 公钥的分配</strong></p><p>公钥也不可随意分配。比如 C 截获 A 发给 B 的报文（报文用 A 的私钥加密并附有 A 的公钥）再转发给 B，B 无法验证这个公钥是 A 的还是 C 的。</p><p>所以要<strong>将公钥与对应的实体</strong>进行绑定，由认证中心 CA 来完成此操作。</p><p>每个实体都有 CA 发来的证书，里面有公钥机器拥有者的标识信息，此证书被 CA 进行了数字签名。</p><p>任何用户都可以从可信的地方获得认证中心 CA 的公钥。</p><h2 id="_7-6-互联网使用的安全协议" tabindex="-1">7.6 互联网使用的安全协议 <a class="header-anchor" href="#_7-6-互联网使用的安全协议" aria-label="Permalink to &quot;7.6 互联网使用的安全协议&quot;">​</a></h2><p>网络层、运输层、应用层都有相应的网络安全协议。</p><p><strong>7.6.1 网络层安全协议</strong></p><p>网络层使用 <strong>IPsec 协议族</strong>。</p><p>VPN 就是用了网络层安全协议。</p><p>IPsec 没有规定用户必须使用哪种加密和鉴别算法，但它提供了一套加密算法。</p><p><strong>IP 安全数据报格式</strong>有两个协议：包括<strong>鉴别首部协议 AH</strong> 和<strong>封装安全有效载荷协议 ESP</strong>。</p><ol><li>AH 协议提供源点鉴别和数据完整性，但不能保密。</li><li>ESP 协议提供源点鉴别、数据完整性和保密。ESP 比 AH 复杂很多。</li></ol><p>使用 AH 或 ESP 协议的 IP 数据报叫做 IP 安全数据报（<strong>IPsec 数据报</strong>）。</p><p>在 IPv6 中，AH 和 ESP 都是扩展首部的一部分。AH 协议都包含在 ESP 协议内部。</p><p>IPsec 数据报的工作方式有两种：</p><ol><li>运输方式：在整个运输层报文段的前后分别添加若干控制信息，再加上 IP 首部，构成 IPsec 数据报。</li><li><strong>隧道方式（使用最多）</strong>：在原始的 IP 数据报的前后分别添加控制信息，再加上新的 IP 首部，构成 IPsec 数据报。</li></ol><p>无论哪种方式，IPsec 数据报的首部都是不加密的（这样路由器才能识别首部中的信息），只有数据部分是经过加密的。</p><p><strong>IPsec 数据报的格式</strong></p><p><img src="'+p+'" alt=""></p><p><strong>7.6.2 运输层安全协议</strong></p><p>运输层的安全协议有<strong>安全套接字层 SSL</strong> 和<strong>运输层安全 TLS</strong>。</p><p><code>SSL</code> 最新版本是 <code>SSL 3.0</code>，<strong>常用的浏览器和 Web 服务器都支持 <code>SSL</code></strong>，<code>SSL</code> 也是 <code>TLS</code> 的基础。</p><p><code>SSL</code> 作用于端系统应用层的 HTTP 和运输层之间，<strong>在 TCP 之上建立起一个安全通道</strong>，为通过 TCP 传输的应用层提供安全保障。</p><p><code>TLS</code> 是在 <code>SSL3.0</code> 的基础上设计的。</p><p>未使用 <code>SSL</code> 时，应用层的数据通过 TCP 套接字与运输层交互，使用 <code>SSL</code> 后，中间又多了一个 <code>SSL</code> 子层。</p><p><img src="'+e+'" alt=""></p><p>网址中 <strong><code>https</code> 表示使用了 <code>SSL</code> 协议</strong>，TCP 的 <code>https</code> 端口号是 <strong>443</strong>，<code>http</code> 端口号是 <strong>80</strong>。</p><p><code>SSL</code> 提供的安全服务可以归纳为三种：</p><ol><li><strong><code>SSL</code> 服务器鉴别</strong>，允许用户证实服务器的身份。</li><li><strong><code>SSL</code> 客户鉴别</strong>，允许服务器证实客户的身份。</li><li>**加密的 <code>SSL</code> 会话，**对客户和服务器之间发送的所有报文加密，并检测报文是否被篡改。</li></ol><p><strong><code>SSL</code> 的工作过程</strong></p><p>以浏览网站为例，用户点击链接建立 TCP 连接后，先进行浏览器和服务器间的握手协议，简要流程如下：</p><ol><li>协商加密算法。</li><li>服务器鉴别。</li><li>会话密钥计算。</li><li>安全数据传输。</li></ol><p><img src="'+g+'" alt=""></p><p><strong>7.6.3 应用层安全协议</strong></p><p><strong>PGP</strong> 是一个完整的电子邮件安全软件包，包括加密、鉴别、电子签名、压缩等技术。PGP 没有使用新概念，只是综合了现有的加密算法。</p><h2 id="_7-7-系统安全-防火墙与入侵检测" tabindex="-1">7.7 系统安全:防火墙与入侵检测 <a class="header-anchor" href="#_7-7-系统安全-防火墙与入侵检测" aria-label="Permalink to &quot;7.7 系统安全:防火墙与入侵检测&quot;">​</a></h2><p><strong>防火墙</strong>和<strong>入侵检测系统 IDS</strong> 构成了系统防御的两层防线。</p><p><strong>7.7.1 防火墙</strong></p><p>防火墙是<strong>一种特殊编程的路由器</strong>，安装在一个网点和网络的其余部分之间，目的是<strong>实施访问控制策略</strong>。</p><p>防火墙内的网络称为可信的网络。</p><p>防火墙技术包括以下两类：</p><ol><li><strong>分组过滤路由器</strong>：它根据过滤规则（基于分组的网络层或运输层的首部信息设定）对进出内部网络的分组执行转发或丢弃。比如将所有目的端口号是 23 的进入内部网路的的分组都丢弃。</li><li><strong>应用网关</strong>：也叫<strong>代理服务器</strong>。一种网络应用需要一个应用网关，万维网缓存就是一种万维网应用的代理服务器。进出网络的应用程序报文都要通过应用网关，应用网关在应用层打开报文检查是否合法。</li></ol><p><strong>7.7.2 入侵检测系统</strong></p><p><strong>入侵检测系统 IDS</strong> 是在入侵开始后及时检测到入侵以便尽快阻止。</p><p>入侵检测系统分为两种：</p><ol><li><strong>基于特征的 IDS</strong>：根据已知攻击的标志性特征检测入侵。</li><li><strong>基于异常的 IDS</strong>：根据网络流量的统计特性来检测入侵。</li></ol><h2 id="_7-8-一些未来的发展方向" tabindex="-1">7.8 一些未来的发展方向 <a class="header-anchor" href="#_7-8-一些未来的发展方向" aria-label="Permalink to &quot;7.8 一些未来的发展方向&quot;">​</a></h2><p>未来的发展方向：</p><ol><li><strong>椭圆曲线密码（ECC）与 AES</strong>。这是下一代金融系统使用的加密系统。</li><li>移动安全。移动通信所需要的。</li><li>量子密码。</li></ol><h2 id="_7-9-网关" tabindex="-1">7.9 网关 <a class="header-anchor" href="#_7-9-网关" aria-label="Permalink to &quot;7.9 网关&quot;">​</a></h2><p>网关（Gateway） 是网络通信中的一个关键设备或系统，用于连接两个 不同协议、不同架构或不同网络环境 的网络，实现它们之间的数据转发与协议转换 。</p><blockquote><p><strong>“网关 = 不同网络之间的桥梁”</strong></p></blockquote><p>你可以把它想象成：</p><ul><li>一座连接两岸的桥</li><li>一个翻译官，能将一种语言（协议）翻译成另一种语言</li><li>一个中转站，负责路由和转换信息</li></ul><table tabindex="0"><thead><tr><th>层级</th><th>设备</th><th>功能</th></tr></thead><tbody><tr><td>应用层</td><td>网关（Application Gateway）</td><td>处理特定应用协议（如 HTTP、FTP）</td></tr><tr><td>传输层</td><td>网关</td><td>协议转换（如 TCP ↔ UDP）</td></tr><tr><td>网络层</td><td>路由器（可作为网关）</td><td>IP 地址转发、路由选择</td></tr><tr><td>数据链路层</td><td>网桥/交换机</td><td>MAC 地址转发</td></tr></tbody></table>',100)]))}const b=o(l,[["render",a]]);export{_ as __pageData,b as default};
