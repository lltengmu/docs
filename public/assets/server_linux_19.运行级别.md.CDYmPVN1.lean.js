import{_ as a,c as o,a0 as d,o as l}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"运行级别","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/19.运行级别.md","filePath":"server/linux/19.运行级别.md","lastUpdated":1734757381000}'),i={name:"server/linux/19.运行级别.md"};function n(s,e,c,t,p,r){return l(),o("div",null,e[0]||(e[0]=[d(`<h1 id="运行级别" tabindex="-1">运行级别 <a class="header-anchor" href="#运行级别" aria-label="Permalink to &quot;运行级别&quot;">​</a></h1><p><code>Linux</code>运行级别是<code>Linux</code>系统启动后进入的不同的工作状态或模式。每个运行级别都有特定的服务和进程在运行，以满足不同系统的需求。</p><h2 id="运行级别的类型" tabindex="-1">运行级别的类型 <a class="header-anchor" href="#运行级别的类型" aria-label="Permalink to &quot;运行级别的类型&quot;">​</a></h2><ol><li><code>0</code>：系统停机状态，也就是关机或者重启状态。系统默认运行级别不能设置为<code>0</code>，否则不能正常启动，一开机就自动关机。</li><li><code>1</code>：单用户状态，也称为<strong>单用户模式</strong>或者<strong>救援模式</strong>。该模式具有<code>root</code>权限，用于系统维护，修复文件系统或恢复丢失的密码等操作。禁止远程登录。</li><li><code>2</code>：多用户状态，但没有<code>NFS</code>网络支持。</li><li><code>3</code>：完整的多用户模式，也称为多用户文本模式。该模式具有<code>NFS</code>支持，登录后进入控制台命令行模式，适用于服务器环境，提供网络服务但不启动图形界面。</li><li><code>4</code>：系统未使用状态，通常保留不用。但在一些特殊情况下，例如在笔记本电池用尽时，可以切换到这个模式来做一些设置。</li><li><code>5</code>：图形化模式，也叫做图形化界面模式。登录后进入图形<code>GUI</code>模式，如<code>windows</code>系统。</li><li><code>6</code>：系统正常关闭并重启状态。默认运行级别不能设置为<code>6</code>，否则不能正常启动，会一直开机重启。</li></ol><h2 id="管理运行级别" tabindex="-1">管理运行级别 <a class="header-anchor" href="#管理运行级别" aria-label="Permalink to &quot;管理运行级别&quot;">​</a></h2><ol><li><p>查看当前运行级别</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>runlevel</span></span></code></pre></div></li><li><p>切换运行级别</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>init _level</span></span></code></pre></div></li></ol><h2 id="权限掩码" tabindex="-1">权限掩码 <a class="header-anchor" href="#权限掩码" aria-label="Permalink to &quot;权限掩码&quot;">​</a></h2><p><code>Linux</code>权限掩码是一个用于设置新创建文件和目录默认权限的掩码值。</p><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p><strong>定义</strong>：权限掩码是一个八进制数，用于默认权限中减去某些权限位。</p><p><strong>功能</strong>：通过设置合适的权限掩码，可以确保新创建的文件和目录具有适当的访问权限，从而提供系统的安全性。</p><h3 id="默认权限掩码的表示" tabindex="-1">默认权限掩码的表示 <a class="header-anchor" href="#默认权限掩码的表示" aria-label="Permalink to &quot;默认权限掩码的表示&quot;">​</a></h3><ol><li>表示方法：权限掩码通常表示为八进制数，例如<code>002</code> 或<code>077</code>。</li><li>设置方法： <ul><li>使用<code>umask</code>指令查看当前默认的权限掩码</li><li>使用<code>umask</code>指令可以设置新的默认权限掩码。</li></ul></li></ol><h3 id="权限掩码的配置与生效" tabindex="-1">权限掩码的配置与生效 <a class="header-anchor" href="#权限掩码的配置与生效" aria-label="Permalink to &quot;权限掩码的配置与生效&quot;">​</a></h3><ol><li>临时修改：在命令行终端中直接运行<code>umask</code>命令可以临时修改掩码，但这种修改只在当前会话中有效，绘画结束后会恢复系统默认值。</li><li>持久修改：要永久修改掩码，可以在用户的额shelll配置文件中设置<code>umask</code>命令。</li><li>检查配置结果：重新打开一个绘画结束窗口，使用<code>umask</code>指令查看配置结果。</li></ol><h2 id="inode和block" tabindex="-1">inode和block <a class="header-anchor" href="#inode和block" aria-label="Permalink to &quot;inode和block&quot;">​</a></h2><p>在<code>Linux</code>系统中，<code>inode</code> 和<code>block</code>是文件系统中的两个重要的组成部分，他们共同负责文件的存储和管理。</p><h4 id="inode" tabindex="-1">inode <a class="header-anchor" href="#inode" aria-label="Permalink to &quot;inode&quot;">​</a></h4><p>定义：<code>inode</code>是存储文件元信息<code>(metadata)</code>的区域，也成<code>索引节点</code>或<code>i节点</code>，全拼是<code>index node</code>。</p><p>功能：</p><ul><li>存储文件的元信息，如文件大小，拥有者，权限，创建时间，修改时间和访问时间等。</li><li>提供文件系统的性能优化，通过读区<code>inode</code>来获取文件的属性，而无需读区整个文件。</li><li>实现硬链接，<code>inode</code>中的硬链接数属性可以用来记录有多少个文件名指向同一个<code>inode</code>。</li></ul><p>特点：</p><ul><li>每个文件和目录都有一个唯一的<code>inode</code>号与之对应。</li><li><code>inode</code>也会消耗磁盘的空间，在硬盘格式化时，操作系统会自动划分<code>inode</code>区来存放<code>inode</code>信息。</li><li>如果一个文件系统中的<code>inode</code>数量耗尽，即使磁盘上还有可用的存储空间，也无法在创建新的文件和目录。</li></ul><h4 id="查看inode空间" tabindex="-1">查看<code>inode</code>空间 <a class="header-anchor" href="#查看inode空间" aria-label="Permalink to &quot;查看\`inode\`空间&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>df -ih</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//输出如下</span></span>
<span class="line"><span>Filesystem     Inodes IUsed IFree IUse% Mounted on</span></span>
<span class="line"><span>devtmpfs         232K   321  232K    1% /dev</span></span>
<span class="line"><span>tmpfs            236K     8  236K    1% /dev/shm</span></span>
<span class="line"><span>tmpfs            236K   512  236K    1% /run</span></span>
<span class="line"><span>tmpfs            236K    18  236K    1% /sys/fs/cgroup</span></span>
<span class="line"><span>/dev/vda1        2.5M  496K  2.1M   20% /</span></span>
<span class="line"><span>tmpfs            236K    93  236K    1% /tmp</span></span>
<span class="line"><span>tmpfs            236K     7  236K    1% /run/user/0</span></span></code></pre></div><h4 id="block" tabindex="-1">block <a class="header-anchor" href="#block" aria-label="Permalink to &quot;block&quot;">​</a></h4><p>定义：<code>block</code>时文件系统存储数据的基本单位。它是由多个连续性的扇区组成。扇区是文件存储的最小单位（每个512字节），而块的大小通常为<code>4KB</code>（即连续8个扇区）。</p><p>功能：用于存储文件数据和目录数据。当文件被创建或修改时，数据会被写入到这些块中。</p><p>管理：<code>Linux</code>文件系统通过块位图来管理块的使用情况，块位图以二进制的方式记录了哪些块是空闲的，哪些块是被占用的。</p><p>特点：</p><ul><li>磁盘读区数据是以<code>Block</code>为单位进行读区的。</li><li>每读取一个<code>Block</code>都会消耗一次磁盘<code>I/O</code>（input/output，磁盘读写）。</li><li>若文件比较大，那么一个文件可能占有多个<code>Block</code></li><li>若文件较小，那么一个<code>Block</code>的剩余空间会被浪费，无论内容有多小。</li></ul>`,31)]))}const b=a(i,[["render",n]]);export{u as __pageData,b as default};
