import{_ as e,c as s,a0 as i,o as p}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"三剑客","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/18.三剑客.md","filePath":"server/linux/18.三剑客.md","lastUpdated":1734757381000}'),t={name:"server/linux/18.三剑客.md"};function n(l,a,o,d,c,h){return p(),s("div",null,a[0]||(a[0]=[i(`<h1 id="三剑客" tabindex="-1">三剑客 <a class="header-anchor" href="#三剑客" aria-label="Permalink to &quot;三剑客&quot;">​</a></h1><p><strong>三剑客</strong> 是指三个强大的命令。</p><h2 id="grep" tabindex="-1">grep <a class="header-anchor" href="#grep" aria-label="Permalink to &quot;grep&quot;">​</a></h2><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li><code>-n</code>：显示行号。</li><li><code>-c</code>：对结果行进行计数。</li><li><code>-i</code>：不区分大小写。</li><li><code>-v</code>：反向搜索，取反。</li><li><code>-w</code>：精准匹配。</li><li><code>-o</code>：只显示匹配的结果。</li><li><code>-A1</code>：同时打印搜索结果行的后一行。</li><li><code>-B3</code>：同时打印搜索结果行的前三行。</li><li><code>-C2</code>：同时打印搜索结果行的上下各两行。</li><li><code>-E</code>：扩展正则表达式。</li><li><code>-P</code>：使用<code>perl</code>正则</li></ul><p>擅长过滤，或者说查找，按行来过滤。</p><p>示例：</p><ol><li><p><code>/var/log/secure</code>是记录用户登录系统的行为的。登录成功还是失败。系统都会记录这次登录的动作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>grep &#39;Failed password&#39; /var/log/secure</span></span></code></pre></div></li><li><p>如果我们想讲登录失败的ip地址找出来，可以再次过滤。比如某个<code>ip</code>地址登录了多少次</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>grep &#39;Failed password&#39; /var/log/secure | grep _ip | wc -l</span></span></code></pre></div></li><li><p>可以借助正则表达式进行过滤，可以讲内容过滤得很干净。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>grep &#39;Failed password&#39; /var/log/secure|grep --color -Po &quot;(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)&quot;</span></span></code></pre></div></li></ol><h2 id="sed" tabindex="-1">sed <a class="header-anchor" href="#sed" aria-label="Permalink to &quot;sed&quot;">​</a></h2><p>这个用的相对较少。主要用于去行和修改替换。</p><p>用法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sed [-nri] [动作] 目标文件路径</span></span></code></pre></div><p>参数讲解：</p><ul><li><code>-n</code>：使用安静（<code>silent</code>）模式。在一般<code>sed</code>用法中，所有来自<code>STDIN</code>的数据一般都会被列出到终端。但是如果加上<code>-n</code>参数后，则只有经过<code>sed</code>特殊处理的那一行才会被列出来。</li><li><code>-r</code>：<code>sed</code>的动作支持的是延伸正则表示法的语法。（默认是基础正则表达式）</li><li><code>-i</code>： 直接修改读取的文件内容，而不是输出到终端。</li></ul><p>动作说明：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[n1[,n2]] function</span></span></code></pre></div><p><code>n1,n2</code>一般表示为行号。<code>[,n2]</code>表示这个参数可选。</p><p><code>function</code>：</p><ul><li><code>a</code>：指定行后面一行。</li><li><code>d</code>：删除。</li><li><code>i</code>：指定行前面插入一行。</li><li><code>p</code>：打印，一般和<code>-n</code>参数一起使用。</li><li><code>s</code>：替换 需要<code>I</code>忽略大小写，全局替换需要<code>G</code>。</li></ul><h2 id="awk" tabindex="-1">awk <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;awk&quot;">​</a></h2><p><strong>擅长取列</strong>。</p><p>比如<code>a.txt</code>的内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2 This is a test.</span></span>
<span class="line"><span>3 Do you like awk.</span></span>
<span class="line"><span>This&#39;s a test.</span></span>
<span class="line"><span>10 There are orange,apple,mongo</span></span></code></pre></div><ol><li><p>取第一列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $1}&#39; a.txt</span></span></code></pre></div></li><li><p>取第三列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $3}&#39; a.txt</span></span></code></pre></div></li><li><p>取第二列和第三列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $2,$3}&#39; a.txt</span></span></code></pre></div></li><li><p>取每一行的最后一列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $NF}&#39; a.txt //NF是固定写法</span></span></code></pre></div></li><li><p>取第一列和最后一列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $1,$NF}&#39; a.txt</span></span></code></pre></div></li><li><p>反着写，将文件内容列重新排版</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $NF,$1}&#39; a.txt</span></span></code></pre></div></li></ol><h4 id="计算" tabindex="-1">计算 <a class="header-anchor" href="#计算" aria-label="Permalink to &quot;计算&quot;">​</a></h4><p>假设<code>4.txt</code>文件内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 水果，每斤多少钱，总共多少斤</span></span>
<span class="line"><span>orange 10 20</span></span>
<span class="line"><span>apple 20  30</span></span>
<span class="line"><span>mongo 50  10</span></span>
<span class="line"><span>banana 5  200</span></span></code></pre></div><ol><li><p>计算每种水果的总价格</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $1,$2*$3}&#39; 4.txt</span></span></code></pre></div></li><li><p>添加备注信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;{print $1&quot;总价为：&quot;,$2*$3&quot;元&quot;}&#39; 4.txt</span></span></code></pre></div></li></ol>`,28)]))}const g=e(t,[["render",n]]);export{u as __pageData,g as default};
