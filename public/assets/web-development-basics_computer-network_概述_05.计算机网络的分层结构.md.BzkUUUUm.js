import{_ as l,c as i,o,ae as t}from"./chunks/framework.Dh1jimFm.js";const a="/assets/The-relationship%E2%80%93between-hierarchical-structures.D6zgTQkl.png",r="/assets/Vertical-relationship-of-hierarchical-structure.B7QYtaxD.png",c="/assets/The-concept-of-PDU-SDU-PCI.NG-WmhBL.png",m=JSON.parse('{"title":"计算机网络的分层结构","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/computer-network/概述/05.计算机网络的分层结构.md","filePath":"web-development-basics/computer-network/概述/05.计算机网络的分层结构.md","lastUpdated":1736416014000}'),p={name:"web-development-basics/computer-network/概述/05.计算机网络的分层结构.md"};function s(n,e,d,h,u,_){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="计算机网络的分层结构" tabindex="-1">计算机网络的分层结构 <a class="header-anchor" href="#计算机网络的分层结构" aria-label="Permalink to &quot;计算机网络的分层结构&quot;">​</a></h1><h2 id="分层设计的思想" tabindex="-1">分层设计的思想 <a class="header-anchor" href="#分层设计的思想" aria-label="Permalink to &quot;分层设计的思想&quot;">​</a></h2><p>计算机之间传递信息，除了在两台计算机之间连接一条通路之外，还需要以下功能：</p><ol><li>发起通信的的计算机必须将数据通信的通路<code>激活</code>。“激活”是指发出一条<code>信令</code>，保证数据在这条通路上正确发送和接收。</li><li>告诉网络如何识别接收数据的计算机。</li><li>发起通信的计算机需查明接收数据的计算机是否已开机，并且已连接网络。</li><li>发起通信的计算机必须知道，在对方的计算机的文件管理程序是否做好接收和存储文件的准备。</li><li>若计算机的文件格式不兼容，则至少其中一台计算机应完成格式转化的功能。</li><li>对出现的各种差错和意外事故，应当有可靠的措施保证数据传输的准确性。</li></ol><p><code>分层</code>思想将将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</p><h2 id="三种常见的计算机网络体系结构" tabindex="-1">三种常见的计算机网络体系结构 <a class="header-anchor" href="#三种常见的计算机网络体系结构" aria-label="Permalink to &quot;三种常见的计算机网络体系结构&quot;">​</a></h2><p>网络体系结构是计算机网络的各层及其协议的集合，就是这个计算机网络及其构件所应完成的功能的精确定义（不涉及实现）。实现是遵循这种体系结构的前提下，用何种硬件或软件完成这些功能的问题。</p><p>三种常见的结构：</p><ul><li><p><strong>OSI 参考模型</strong>:</p><ul><li>应用层：实现特定的网络应用。</li><li>表示层： 解决不同主机上信息不一致的问题。（数据格式转换）</li><li>会话层：管理进程间的会话（采用检查点机制，当通信失效时从检查点继续恢复通信）</li><li>传输层：实现端到端通信（即实现进程到进程的通信，“端”指端口），包含以下功能： <ol><li>复用和分用：发送端几个高层实体复用一条底层的连接，在接收端再进行分用。</li><li>其他功能：差错控制、流量控制、连接建立与释放、可靠传输数据管理</li></ol></li><li>网络层：把分组从源节点转发到目的节点，包含以下功能： <ol><li>路由选择：构造并维护路由表，决定分组到达目的节点的最佳路径</li><li>分组转发 ：将分组从合适的端口转发出去</li><li>拥塞控制：发现网络拥堵，采取措施缓解拥堵</li><li>网络互联：实现异构网络互联</li><li>其他功能：差错控制，流量控制，连接建立与释放、可靠传输管理</li></ol></li><li>数据链路层：确保相邻节点之间的链路逻辑上无差错。包含以下功能：1. 差错控制 2.流量控制</li><li>物理层：实现相邻节点之间比特（0 或1）的传输</li></ul></li><li><p><strong>TCP/IP模型</strong>：</p><p>理念：如果某些应用需要使用数据转换、会话管理功能，就交给应用层的特定协议去实现。</p><ol><li><p>应用层：实现特定的网络应用</p></li><li><p>传输层：复用和分用，差错控制、流量控制、连接建立与释放、可靠传输管理</p></li><li><p>网络层：路由选择，分组转发，拥塞控制，网际互联，差错控制，流量控制，连接管理，可靠传输管理。</p></li><li><p>网络接口层：实现相邻节点间的数据传输（为网络层传输“分组”）。但具体怎么传输不作规定。网络接口层为网络层传输“分组”。但<code>TCP/IP</code>并未具体描述网络接口层的功能、协议（交给网络设备商自由发挥）。</p></li></ol></li><li><p><strong>五层模型</strong></p><ol><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol></li></ul><h2 id="各层之间的关系" tabindex="-1">各层之间的关系 <a class="header-anchor" href="#各层之间的关系" aria-label="Permalink to &quot;各层之间的关系&quot;">​</a></h2><p><strong>从水平视角看</strong>：</p><p>实体：在计算机网络的分层结构中，第 n 层中的活动元素（软件 + 硬件），通常称为第 n 层实体。不同机器上的同一层称为 <code>对等层</code>，同一层的实体称为<code>对等实体</code>。</p><p>协议：即 网络协议<code>Network Protocl</code>，是控制对等实体之间进行通信的规则的集合，是水平的。</p><p>图示：</p><p><img src="'+a+'" alt="The-relationship–between-hierarchical-structures"></p><p><strong>从垂直视角看：</strong></p><p>接口：即同一节点内相邻的实体交换信息的逻辑接口，也称为服务访问节点（Service Access Point,SAP）。</p><p>服务：服务是指下层为紧邻的上层提供的功能调用，它是垂直的。</p><p>图示：</p><p><img src="'+r+'" alt="Vertical-relationship-of-hierarchical-structure"></p><h2 id="pdu、sdu、pci-的概念" tabindex="-1">PDU、SDU、PCI 的概念 <a class="header-anchor" href="#pdu、sdu、pci-的概念" aria-label="Permalink to &quot;PDU、SDU、PCI 的概念&quot;">​</a></h2><ul><li>协议数据单元（PDU）：对等层次之间传送的数据单位，第 n 层的PDU 记为 n-PDU。</li><li>服务数据单元（SDU）：为完成上一层实体所要求的功能而传送的数据。第 n 层的SDU 记为 n-SDU。</li><li>协议控制单元（PCI）：控制协议操作的信息。第 n 层的PCI记为 n-PCI。</li></ul><p>三者之间的关系：<code>n-SDU</code> + <code>n-PCI</code> = <code>n-PDU</code> = <code>(n-1)-SUD</code></p><p>图示：</p><p><img src="'+c+'" alt="The-concept-of-PDU-SDU-PCI"></p><h2 id="协议三要素" tabindex="-1">协议三要素 <a class="header-anchor" href="#协议三要素" aria-label="Permalink to &quot;协议三要素&quot;">​</a></h2><p>即 网络协议<code>Network Protocol</code>，是控制对等实体之间进行通信的规则的集合，是水平的。</p><p>协议由<code>语法</code>、<code>语义</code>和<code>同步</code>三部分组成（协议的三要素）:</p><ul><li>语法：数据与控制信息的格式，例如，协议控制信息（首部）部分占几个字节、每个字节是什么含义，协议的数据部分最多由多少字节。</li><li>语义：即需要发出何种控制信息，完成何种动作及做出何种应答方式。例如，协议中需要明确规定：发送完数据之后，接受方是否需要“应答”。以及应答的种类有哪些。（如：传输成功、传输失败）。</li><li>同步（时序）：之心各种操作的条件，时序关系等，即时间实现顺序的详细说明。例如，发送方发完数据后，接受方需要立即应答。如果发送方在10秒内未收到“传输成功”应答，则发送方会再次发送数据。</li></ul>',29)]))}const D=l(p,[["render",s]]);export{m as __pageData,D as default};
