import{_ as a,c as e,a0 as n,o as p}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"特殊权限","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/20.特殊权限.md","filePath":"server/linux/20.特殊权限.md","lastUpdated":1734757381000}'),o={name:"server/linux/20.特殊权限.md"};function t(d,s,i,c,l,r){return p(),e("div",null,s[0]||(s[0]=[n(`<h1 id="特殊权限" tabindex="-1">特殊权限 <a class="header-anchor" href="#特殊权限" aria-label="Permalink to &quot;特殊权限&quot;">​</a></h1><p>在<code>linux</code>操作系统中，除了常规的读、写和执行权限外，还存在一些特殊的权限，用于实现更复杂的权限控制机制。</p><h2 id="suid-set-user-id" tabindex="-1">SUID(Set User ID) <a class="header-anchor" href="#suid-set-user-id" aria-label="Permalink to &quot;SUID(Set User ID)&quot;">​</a></h2><p>含义：当执行一个设置了<code>SUID</code>位的可执行文件时，该文件以文件所有者的权限运行，而不是以执行者的权限运行。人话：就是某个可执行文件有<code>super</code>超级管理员权限，这个文件普通用户也能使用。</p><p>表示方法：在文件权限的用户位上设置<code>s</code>或者<code>S</code></p><p>应用场景：常用于需要特权的程序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//例子1:</span></span>
<span class="line"><span>passwd _userName</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//查看passwd问价的权限</span></span>
<span class="line"><span>ll /usr/bin/passwd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//输出如下</span></span>
<span class="line"><span>-rwsr-xr-x. 1 root root 37288 Aug  3  2022 /usr/bin/passwd</span></span></code></pre></div><ul><li><code>rwsr</code>：用户本身的权限中可以看到有一个<code>s</code>，其实这个<code>s</code>就是<code>x</code>权限，但是用<code>s</code>就是用来标记这个文件是一个具有<code>suid</code>权限的特殊执行文件。由于特殊权限位只有9位，所以特殊权限的执行权限用<code>s</code>代替了<code>x</code>。</li></ul><p>为什么会给这个文件一个叫做<code>suid</code>的权限呢？这个文件是用于修改用户密码的执行文件，普通用户是不是也可以修改自己的密码。但是修改密码修改的是<code>/etc/shadow</code>文件的内容。查看一下<code>/etc/shadow</code>文件的权限。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ll /etc/shadow</span></span>
<span class="line"><span>//输出如下：</span></span>
<span class="line"><span>---------- 1 root root 1207 Dec 17 20:39 /etc/shadow</span></span></code></pre></div><p>这个文件的权限是<code>000</code>,普通用户根本没有修改这个文件的权限。因为如果普通用户可以修改这个文件的话，那么<code>root</code>用户的密码也能被普通用户修改，系统安全性降低。但是每次该密码都需要root用户修改，也是很麻烦的。</p><p>root用户修改普通用户密码和普通用户自己修改密码的区别：</p><ul><li>普通用户修改密码，必须要输入原来的密码，<code>root</code>用户不需要</li><li>普通用户修改密码，密码复杂度要更高，比如说新密码要符合具有大小写和长度必须至少为8个字符的规则。</li></ul><p>普通用户修改密码也要用<code>passwd</code>所以系统给这个文件一个特殊的权限，也就是<code>s</code>。当普通用户使用这个文件的时候，可以拥有文件所属用户的执行权限，也就是<code>root</code>的<code>x</code>权限，这就是<code>suid</code>权限的意思。</p><h2 id="sgid" tabindex="-1">SGID <a class="header-anchor" href="#sgid" aria-label="Permalink to &quot;SGID&quot;">​</a></h2><p>含义：</p><ul><li>对于可执行文件，<code>SGID</code>的作用类似于<code>SUID</code>，即文件将以文件所属组的权限运行。</li><li>对于目录，<code>SGID</code>表示在该目录下创建的新文件将继承目录的组属性，而不是创建者的组属性。</li></ul><p>表示方法：在文件权限的组位上设置<code>s</code>或者<code>S</code>。</p><p>应用场景：用于共享目录。</p><h4 id="sticky-粘滞位" tabindex="-1">sticky 粘滞位 <a class="header-anchor" href="#sticky-粘滞位" aria-label="Permalink to &quot;sticky 粘滞位&quot;">​</a></h4><p>是针对目录的操作，当多个用户共同使用一个目录时，实现用户之间不能互相删除修改对方文件的权限。</p><ol><li><p>尝试创建一个共享目录<code>data</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir data</span></span></code></pre></div></li><li><p>修改权限为<code>777</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chmod 777 data</span></span></code></pre></div><p>目录权限如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drwxrwxrwx    2 root root  4096 Dec 20 18:16 data</span></span></code></pre></div></li><li><p>使用普通用户身份在该目录中添加一个文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//在Eddie用户身份在该目录中新增一个文件</span></span>
<span class="line"><span>touch Eddie.txt</span></span></code></pre></div><p><code>Eddie.txt</code>文件权限如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-rw-rw-r-- 1 Eddie Eddie 0 Dec 20 18:19 Eddie.txt</span></span></code></pre></div></li><li><p>切换到<code>root</code>用户添加一个文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>touch root.txt</span></span></code></pre></div><p>此时该目录下的文件权限如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-rw-rw-r-- 1 Eddie Eddie 0 Dec 20 18:19 Eddie.txt</span></span>
<span class="line"><span>-rw-r--r-- 1 root  root  0 Dec 20 18:21 root.txt</span></span></code></pre></div></li><li><p>此时<code>data</code>目录权限为<code>777</code>，任何人都可以往这个目录下添加文件。尝试切换为普通用户<code>Eddie</code>去删除<code>root</code>删除的文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//这里要切换到Eddie用户并且切换到/data目录下</span></span>
<span class="line"><span>rm -rf root.txt</span></span></code></pre></div><p><code>ls</code>查看文件列表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls</span></span></code></pre></div><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Eddie.txt</span></span></code></pre></div><p><code>root.txt</code>文件已经被普通用户<code>Eddie</code>删除。这是不对的，我们希望只有用户的创建者才能删除自身的文件。那么就可以使用<code>sticky</code>粘滞位来标记这个文件。</p></li><li><p>修改<code>data</code>目录的权限</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>chmod o+t /data/</span></span></code></pre></div><p>查看执行指令之后<code>data</code>目录的权限：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drwxrwxrwt    2 root root  4096 Dec 20 18:24 data</span></span></code></pre></div><p>根据<code>ugo</code>权限体系，在<code>o</code>部分的执行权限位置为<code>t</code>。</p></li><li><p>root再去<code>data</code>目录中新建一个文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//这里root用户要切换到/data目录中</span></span>
<span class="line"><span>touch root.txt</span></span></code></pre></div></li><li><p>切换到普通用户，再出尝试删除<code>root</code>用户创建的文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//这里要切换到Eddie用户，并且切换到/data目录中</span></span>
<span class="line"><span>rm -rf root.txt</span></span></code></pre></div><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rm: cannot remove &#39;root.txt&#39;: Operation not permitted</span></span></code></pre></div></li></ol><p>粘滞位保护了共享目录中，不同用户之间不能互相删除对方的文件。</p><h2 id="su-和-sudo" tabindex="-1">su 和 sudo <a class="header-anchor" href="#su-和-sudo" aria-label="Permalink to &quot;su 和 sudo&quot;">​</a></h2><h4 id="su" tabindex="-1">su <a class="header-anchor" href="#su" aria-label="Permalink to &quot;su&quot;">​</a></h4><p><code>su</code> 全称<code>switch user</code>.</p><ol><li><p>用户切换</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//root用户可以很方便的切换到任意用户</span></span>
<span class="line"><span>su - _userName</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//退出，又回到root用户</span></span>
<span class="line"><span>exit</span></span></code></pre></div></li><li><p>普通用户切换到<code>root</code>用户需要输入<code>root</code>用户密码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>su - root</span></span></code></pre></div></li></ol><p>不带-也是可以的，带-的话，就是切换完用户之后，直接到用户家目录下，不带-就不是家目录。</p><h4 id="sudo" tabindex="-1">sudo <a class="header-anchor" href="#sudo" aria-label="Permalink to &quot;sudo&quot;">​</a></h4><p><code>sudo</code>全称是：<code>super do</code>。它的作用是用于授权的。就是赋予普通用户更高级的权限。原因是很多的操作，如果都需要<code>root</code>用户去做，太麻烦了。所以给普通用户做一些授权，普通用户操作就方便了。授权就需要用到<code>sudo</code>。<code>sudo</code>并不是直接给普通用户所有权限，而是一个命令一个命令的授权。</p><h2 id="linux-普通用户提权" tabindex="-1">linux 普通用户提权 <a class="header-anchor" href="#linux-普通用户提权" aria-label="Permalink to &quot;linux 普通用户提权&quot;">​</a></h2><h4 id="sudo-提权" tabindex="-1">sudo 提权 <a class="header-anchor" href="#sudo-提权" aria-label="Permalink to &quot;sudo 提权&quot;">​</a></h4><p>我们使用<code>sudo</code>授权时给的权限太高，或者给授权时控制不合理，就会被普通用户利用来提权。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>示例1：</span></span>
<span class="line"><span>vim  # 命令模式执行: !/</span></span>
<span class="line"><span> # 通过vim修改/etc/sudoers，授权ALL</span></span>
<span class="line"><span> # 再通过vim进入一个文件</span></span>
<span class="line"><span> # :输入指令，是可以直接输入系统指令的，前面加一个!即可，比如创建一个文件，!touch 3.txt</span></span>
<span class="line"><span> # 查看3.txt信息如下</span></span>
<span class="line"><span> [jaden@localhost ~]$ ll</span></span>
<span class="line"><span>   总用量 0</span></span>
<span class="line"><span>    -rw-r--r-- 1 root root  0 3月  27 17:05 3.txt  # 以root用户身份创建的文件</span></span>
<span class="line"><span> # 如果在vim文件时，执行!/bin/bash，就进入到了root的命令终端，可以为所欲为。</span></span>
<span class="line"><span> # 这就是sudo提权，但是sudo提权需要借助到可以执行系统指令的交互式的功能，比如vim。</span></span>
<span class="line"><span>示例2：</span></span>
<span class="line"><span> find # sudo find . -exec bash \\; # 直接进入root的命令终端，这个指令退出root终端可能</span></span>
<span class="line"><span>要退好几次才行，看find找到了几个文件，找到了3个文件，就输入三次exit才能退出。</span></span>
<span class="line"><span>示例3：</span></span>
<span class="line"><span> awk  # sudo awk &#39;BEGIN {system(&quot;/bin/bash&quot;)}&#39; jaden.txt # 直接进入到root命令终</span></span>
<span class="line"><span>端，exit直接退出。</span></span>
<span class="line"><span> </span></span>
<span class="line"><span># 还有好多指令可以提权，比如cp命令也可以提权，将其他电脑上的/etc/shadow文件拷贝到这个系统中，</span></span>
<span class="line"><span>密码就改掉了，再su切换到root即可等等，还有什么mv、vi、sed修改文件、chmod改重要文件权限等等这</span></span>
<span class="line"><span>里就不多提了。大家可以试试，普通用户使用sudo来修改shadow文件的root用户的密码。</span></span></code></pre></div><h4 id="脏牛提权" tabindex="-1">脏牛提权 <a class="header-anchor" href="#脏牛提权" aria-label="Permalink to &quot;脏牛提权&quot;">​</a></h4><p><code>dcow</code>全称<code>dirty cow</code>，脏牛，原理：<code>Linux</code>内核的内存子系统在处理写入时复制（copy-on-write, COW，组合起来是牛的意思）时产生了竞争条件。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问，所以大家都管这个提权方式叫做脏牛提权。原理这一块大家不需要掌握，会监测是否存在这个漏洞即可。</p>`,36)]))}const b=a(o,[["render",t]]);export{u as __pageData,b as default};
