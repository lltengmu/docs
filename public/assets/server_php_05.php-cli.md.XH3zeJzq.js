import{_ as s,c as l,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"PHP-CLI","description":"","frontmatter":{},"headers":[],"relativePath":"server/php/05.php-cli.md","filePath":"server/php/05.php-cli.md","lastUpdated":1741324650000}'),p={name:"server/php/05.php-cli.md"};function e(n,i,h,o,r,d){return a(),l("div",null,i[0]||(i[0]=[t('<h1 id="php-cli" tabindex="-1">PHP-CLI <a class="header-anchor" href="#php-cli" aria-label="Permalink to &quot;PHP-CLI&quot;">​</a></h1><h2 id="脚本-script" tabindex="-1">脚本(script) <a class="header-anchor" href="#脚本-script" aria-label="Permalink to &quot;脚本(script)&quot;">​</a></h2><p>在计算机领域，脚本是一种使用特定脚本语言编写的程序代码文件。它具有以下特点：</p><ol><li><strong>文本形式</strong>：脚本通常是以纯文本形式存在的，这使得它们可以使用简单的文本编辑器进行创建和修改。</li><li><strong>解释执行</strong>：与编译型语言不同，脚本语言编写的脚本不需要经过编译步骤，而是由相应的解释器逐行解释并执行。</li><li><strong>自动化任务</strong>：脚本通常用于自动化重复性的操作，如文件操作、数据处理、系统管理等。通过编写脚本，可以大大提高工作效率和准确性。</li><li><strong>跨平台性</strong>：大多数脚本语言都具有跨平台性，可以在不同操作系统上运行。这使得脚本成为了一种非常灵活和强大的工具。</li></ol><p>在计算机领域中，脚本的分类和应用也非常广泛。例如：</p><ul><li><strong>Shell脚本</strong>：主要用于类Unix系统（如Linux、macOS）的系统管理和自动化任务。</li><li><strong>Python脚本</strong>：Python作为一种功能强大的脚本语言，其编写的脚本可以用于数据处理、机器学习、Web开发等多个领域。</li><li><strong>测试脚本</strong>：在软件开发过程中，测试脚本用于自动化测试，以确保软件的质量和稳定性。</li></ul><h2 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h2><p><strong>PHP CLI</strong> （Command Line Interface）是 PHP 的命令行接口模式。它允许开发者在终端或命令行环境中直接运行 PHP 脚本，而无需通过 Web 服务器（如 Apache 或 Nginx）。PHP CLI 是 PHP 的一个独立运行环境，专门用于执行脚本、自动化任务、调试代码等。</p><p><strong>特点</strong>：</p><ol><li><strong>无 Web 服务器依赖</strong> ： <ul><li>PHP CLI 不需要 Web 服务器（如 Apache 或 Nginx），也不需要 PHP-FPM。</li><li>它直接通过命令行运行 PHP 脚本。</li></ul></li><li><strong>适合后台任务</strong> ： <ul><li>常用于定时任务（Cron Jobs）、脚本自动化、数据处理、日志分析等场景。</li></ul></li><li><strong>支持标准输入输出</strong> ： <ul><li>可以通过标准输入（<code>stdin</code>）、标准输出（<code>stdout</code>）和标准错误输出（<code>stderr</code>）与用户交互。</li></ul></li><li><strong>独立配置</strong> ： <ul><li>PHP CLI 使用独立的配置文件（通常为 <code>php-cli.ini</code>），与 Web 环境中的 PHP 配置分离。</li><li>这使得 CLI 模式可以针对命令行任务进行优化，而不影响 Web 应用。</li></ul></li><li><strong>内置功能丰富</strong> ： <ul><li>支持所有 PHP 核心功能（如数组、字符串、文件操作等）。</li><li>提供专用的 CLI 工具函数（如 <code>$argv</code> 和 <code>$argc</code>）。</li></ul></li></ol><h2 id="如何运行php-cli" tabindex="-1">如何运行php-cli <a class="header-anchor" href="#如何运行php-cli" aria-label="Permalink to &quot;如何运行php-cli&quot;">​</a></h2><ol><li><p>检查php是否安装</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">v</span></span></code></pre></div><p>如显示php版本，则cli工具可用。</p></li><li><p>运行一个php文件(脚本)</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _file_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span></code></pre></div></li><li><p>直接运行PHP代码</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo &quot;hello world&quot;&#39;</span></span></code></pre></div></li><li><p>交互式shell</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span></code></pre></div></li></ol>',12)]))}const k=s(p,[["render",e]]);export{g as __pageData,k as default};
