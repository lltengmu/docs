import{_ as o,c as a,a0 as c,o as d}from"./chunks/framework.CoVXEd1Z.js";const t="/assets/Memory-read-and-write-process.X72n3ZoC.png",r="/assets/Memory-model-diagram.CLuiCvm8.png",b=JSON.parse('{"title":"内存","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/computer-basics/baks/03.内存.md","filePath":"web-development-basics/computer-basics/baks/03.内存.md","lastUpdated":null}'),s={name:"web-development-basics/computer-basics/baks/03.内存.md"};function i(l,e,p,n,m,C){return d(),a("div",null,e[0]||(e[0]=[c('<h1 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h1><p><code>CPU</code> 和内存就像是一堆不可分割的的恋人一样，是无法拆散的一对儿。没有内存，<code>CPU</code>就无法执行程序指令，那么计算机也就失去了意义；只有内存，无法执行指令，那么计算机照样无法运行。</p><p>那么什么是内存呢？内存和<code>CPU</code>如何进行交互呢？下面就来介绍一下。</p><h3 id="什么是内存" tabindex="-1">什么是内存 <a class="header-anchor" href="#什么是内存" aria-label="Permalink to &quot;什么是内存&quot;">​</a></h3><p>内存（Memory）是计算机最重要的部件之一，它是程序与<code>CPU</code>进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存对计算机的影响非常大，内存又被称为<code>主存</code>，其作用是存放<code>CPU</code>中的运算数据，以及与硬盘等外部存储交换的数据。只要计算机在运行中，<code>CPU</code>就会把需要运算的数据调到主存中进行计算，当运算完成之后再将结果传送出来，主存的运行也决定了计算机的稳定运行。</p><h3 id="内存的物理结构" tabindex="-1">内存的物理结构 <a class="header-anchor" href="#内存的物理结构" aria-label="Permalink to &quot;内存的物理结构&quot;">​</a></h3><p>内存的内部由各种<code>IC</code>电路组成，它的种类很庞大，但是其主要分为三种存储器。</p><ul><li>随机存储器<code>RAM</code>：内存中最重要的一种，表示既可以从中读取数据，也可以写入数据。当机器关闭时，内存中的信息会<code>丢失</code>。</li><li>只读存储器<code>ROM</code>:<code>ROM</code>一般只能用于读取的数据，不能写入数据，但是当机器停电时，这些数据不会丢失。</li><li>高速缓存<code>Cache</code>：cache 也是我们进程见到的，它分为一级缓存、二级缓存、三级缓存这些数据，它位于内存和<code>CPU</code>之间，是一个读写速度比内存<code>更快</code>的存储器。当<code>CPU</code>向内存写入数据时，这些数据也会被写入高速缓存中，当<code>CPU</code>需要读取数据时，会直接从高速缓存中读取，当然，如需要的数据在Cache中没有，<code>CPU</code>会再去读取内存中的数据。</li></ul><p>内存 IC 是一个完整的结构，它内部也有电源、地址信号、数据信号、控制信号和用于寻址的 IC 引脚来进行数据的读写。下面是一个虚拟的 IC 引脚示意图![Memory IC](../images/Memory IC.png)</p><p>图中 VCC 和 GND 表示电源，A0 - A9 是地址信号的引脚，D0 - D7 表示的是控制信号、RD 和 WR 都是好控制信号，我用不同的颜色进行了区分，将电源连接到 VCC 和 GND 后，就可以对其他引脚传递 0 和 1 的信号，大多数情况下，<strong>+5V 表示1，0V 表示 0</strong>。</p><p>我们都知道内存是用来存储数据，那么这个内存 IC 中能存储多少数据呢？D0 - D7 表示的是数据信号，也就是说，一次可以输入输出 8 bit = 1 byte 的数据。A0 - A9 是地址信号共十个，表示可以指定 00000 00000 - 11111 11111 共 2 的 10次方 = <code>1024个地址</code>。每个地址都会存放 1 byte 的数据，因此我们可以得出内存 IC 的容量就是 1 KB。</p><h3 id="内存的读写过程" tabindex="-1">内存的读写过程 <a class="header-anchor" href="#内存的读写过程" aria-label="Permalink to &quot;内存的读写过程&quot;">​</a></h3><p>让我们把关注点放在内存 IC 对数据的读写过程上来吧！我们来看一个对内存IC 进行数据写入和读取的模型</p><p><img src="'+t+'" alt="Memory-read-and-write-process"></p><p>来详细描述一下这个过程，假设我们要向内存 IC 中写入 1byte 的数据的话，它的过程是这样的：</p><ul><li>首先给 VCC 接通 +5V 的电源，给 GND 接通 0V 的电源，使用 <code>A0 - A9</code> 来指定数据的存储场所，然后再把数据的值输入给 <code>D0 - D7</code> 的数据信号，并把 <code>WR（write）</code>的值置为 1，执行完这些操作后，即可以向内存 IC 写入数据</li><li>读出数据时，只需要通过 A0 - A9 的地址信号指定数据的存储场所，然后再将 RD 的值置为 1 即可。</li><li>图中的 RD 和 WR 又被称为控制信号。其中当WR 和 RD 都为 0 时，无法进行写入和读取操作。</li></ul><h3 id="内存的现实模型" tabindex="-1">内存的现实模型 <a class="header-anchor" href="#内存的现实模型" aria-label="Permalink to &quot;内存的现实模型&quot;">​</a></h3><p>为了便于记忆，我们把内存模型映射成为我们现实世界的模型，在现实世界中，内存的模型很想我们生活的楼房。在这个楼房中，1层可以存储一个字节的数据，楼层号就是<code>地址</code>，下面是内存和楼层整合的模型图。</p><p><img src="'+r+'" alt="Memory-model-diagram"></p><p>我们知道，程序中的数据不仅只有数值，还有<code>数据类型</code>的概念，从内存上来看，就是占用内存大小（占用楼层数）的意思。即使物理上强制以 1 个字节为单位来逐一读写数据的内存，在程序中，通过指定其数据类型，也能实现以特定字节数为单位来进行读写。</p>',20)]))}const u=o(s,[["render",i]]);export{b as __pageData,u as default};
