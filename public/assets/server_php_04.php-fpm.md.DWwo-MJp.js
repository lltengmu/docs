import{_ as i,c as a,o as n,ae as p}from"./chunks/framework.Dh1jimFm.js";const F=JSON.parse('{"title":"php-fpm","description":"","frontmatter":{},"headers":[],"relativePath":"server/php/04.php-fpm.md","filePath":"server/php/04.php-fpm.md","lastUpdated":1741324650000}'),l={name:"server/php/04.php-fpm.md"};function h(k,s,t,e,r,d){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="php-fpm" tabindex="-1">php-fpm <a class="header-anchor" href="#php-fpm" aria-label="Permalink to &quot;php-fpm&quot;">​</a></h1><p>PHP-FPM（FastCGI Process Manager）是一个用于管理PHP进程的工具，它是PHP的一个扩展模块，专门用于处理 FastCGI协议，PHP- FPM是一种高效的、可扩展的方式来运行PHP脚本，尤其适用于高并发场景下的Web服务器环境。</p><h2 id="cgi-和fastcgi" tabindex="-1">CGI 和FastCGI <a class="header-anchor" href="#cgi-和fastcgi" aria-label="Permalink to &quot;CGI 和FastCGI&quot;">​</a></h2><h4 id="cgi" tabindex="-1">CGI <a class="header-anchor" href="#cgi" aria-label="Permalink to &quot;CGI&quot;">​</a></h4><p><strong>定义</strong>：全称Common Gateway Interface，即公共网关接口，是一种用于Web服务器与外部程序之间通信的标准协议。CGI程序通常是由各种编程语言（如Python、Perl、C/C++等）编写的脚本或应用程序。</p><p><strong>工作原理</strong>：</p><p>CGI程序通过CGI接口接收来自Web服务器的请求，并返回动态生成的内容，如HTML页面、图像或其他格式的数据。这些内容随后由Web服务器发送给客户端浏览器，从而实现动态网页的展示。</p><p><strong>特点</strong>：</p><ul><li>每次请求都会启动一个新的进程来处理该请求，请求处理结束后进程会被销毁。</li><li>性能在并发请求高的情况下较低，因为频繁创建和销毁进程会消耗大量资源。</li><li>适合小规模项目或开发调试阶段。</li></ul><h4 id="fastcgi" tabindex="-1">FastCGI <a class="header-anchor" href="#fastcgi" aria-label="Permalink to &quot;FastCGI&quot;">​</a></h4><p><strong>定义</strong>：FastCGI是对CGI的改进版本，旨在提高性能。它同样可以在多种语言中使用，并且优化了CGI的性能问题。</p><p><strong>工作原理</strong>：FastCGI通过保持外部程序的长时间运行来避免频繁创建和销毁进程。它启动后会保持一组PHP（或其他语言）进程在内存中，多个请求可以复用这些进程，从而提高了效率。</p><p><strong>特点</strong>：</p><ul><li>进程复用：多个请求可以复用一组长期运行的进程，减少了创建和销毁进程的开销。</li><li>持久连接：支持持久化进程，减少了每次请求启动新进程的开销。</li><li>支持并发处理：可以同时处理多个请求，提高了并发处理能力。</li><li>常与Nginx、Apache等Web服务器结合使用，通过PHP-FPM（PHP FastCGI Process Manager）来管理PHP进程。</li></ul><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在传统的PHP部署方式中，PHP脚本通常由Web服务器通过<code>mod_php</code>模块直接执行。这种方式在高并发场景下存在性能瓶颈，因为每个请求都会启动一个新的PHP解释器示例，消耗大量资源。</p><p>为了解决这个问题，PHP引入了FastCGI协议，并通过PHP- FPM来实现更高效的PHP处理机制。PHP- FPM的主要作用包括：</p><ol><li><p>进程管理：</p><p>管理多个PHP子进程，根据负载动态调整进程数量。</p><p>提供进程池机制，避免每次请求都重新启动PHP解释器。</p></li><li><p>高性能</p><p>支持异步I/O和事件驱动模型，提高并发处理能力。</p><p>减少资源消耗，适合高流量网站。</p></li><li><p>灵活配置</p><p>支持多站点，多用户隔离</p><p>可以针对不同的虚拟主机或路径设置独立的配置</p></li><li><p>日志记录</p><p>提供详细的日志功能，方便调试和监控</p></li></ol><h2 id="php-fpm的工作原理" tabindex="-1">PHP- FPM的工作原理 <a class="header-anchor" href="#php-fpm的工作原理" aria-label="Permalink to &quot;PHP- FPM的工作原理&quot;">​</a></h2><p>PHP- FPM作为FastCGI的实现，其工作流程如下：</p><ol><li><p>Web服务器接收请求：</p><p>用户通过浏览器访问一个PHP页面，Web服务器接收到HTTP请求。</p></li><li><p>Web服务器转发请求：</p><p>Web服务器将PHP请求通过FastCGI协议转发给PHP- FPM</p></li><li><p>返回结果：</p><p>PHP- FPM将处理结果通过FastCGI协议返回给Web服务器</p><p>Web服务器将结果返回给客户端。</p></li></ol><h2 id="php-fpm的核心特性" tabindex="-1">PHP- FPM的核心特性 <a class="header-anchor" href="#php-fpm的核心特性" aria-label="Permalink to &quot;PHP- FPM的核心特性&quot;">​</a></h2><ol><li><p>进程池：</p><p>PHP- FPM支持多个进程池，每个池可以独立配置，适合多站点或多用户的场景。</p><p>每个池可以绑定到不痛的Unix Socket或TCP端口。</p></li><li><p>动态进程管理：</p><p>支持三种进程管理模式：</p><ol><li>static：固定数量的子进程。</li><li>Dynamic：根据负载动态调整子进程数量。</li><li>Ondemand：按需启动子进程。</li></ol></li></ol><h2 id="php-fpm配置文件" tabindex="-1">PHP- FPM配置文件 <a class="header-anchor" href="#php-fpm配置文件" aria-label="Permalink to &quot;PHP- FPM配置文件&quot;">​</a></h2><p>配置文件路径通常位于：<code>/etc/php-fpm.conf</code>或者<code>/etc/php/{version}/fpm/pool.d/wwww.conf</code></p><p>一个PHP-FPM配置文件如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 指定 PHP-FPM 主进程的 PID 文件路径。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * PID 文件记录了 PHP-FPM 主进程的进程 ID，用于管理和控制 PHP-FPM 的运行状态。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在这里，PID 文件存储在 /Applications/EServer/software/php/php-7.4/var/run/php-fpm.pid</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Applications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">software</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/var/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 指定 PHP-FPM 的错误日志文件路径。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 所有 PHP-FPM 的错误信息都会记录到该文件中。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在这里，错误日志存储在 /Applications/EServer/software/php/php-7.4/var/log/php-fpm.log。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error_log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Applications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">software</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/var/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fpm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置日志的记录级别。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 日志级别从低到高依次为：debug、notice、warn、error、alert。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * notice 表示记录普通的通知信息和警告信息，但不会记录调试信息。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 这是一个平衡性能和调试需求的常用设置。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 进程池配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">www</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 指定 PHP-FPM 监听的地址或端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 这里使用的是 Unix Socket（/tmp/php-cgi-7.4.sock），而不是 TCP 端口。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Unix Socket 是一种高效的本地通信方式，适合 Web 服务器和 PHP-FPM 都在同一台机器上的场景。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 如果需要通过网络访问，可以改为类似 127.0.0.1:9000 的 TCP 地址。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">listen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cgi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sock</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置 Unix Socket 文件的权限模式。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 0666 表示所有用户都可以读写该 Socket 文件。0666 的权限表达式为：-rw-rw-rw-</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 权限模式遵循 Unix 文件权限规则（如 chmod 命令）。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 注意：如果权限设置不当，可能会导致 Web 服务器无法与 PHP-FPM 通信。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">listen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0666</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置 PHP-FPM 的进程管理模式。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * dynamic 表示动态管理子进程数量，根据负载自动调整。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 其他选项包括：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * static：固定数量的子进程。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * ondemand：按需启动子进程，适合低流量场景。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dynamic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置最大子进程数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 最大允许同时运行的 PHP 子进程数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在这里，最多可以同时运行 5 个子进程。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 如果并发请求超过这个数量，多余的请求会被排队等待。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max_children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置启动时创建的子进程数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 当 PHP-FPM 启动时，会预先创建 2 个子进程。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 这些子进程可以立即处理请求，避免动态创建进程的开销。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start_servers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置最小空闲子进程数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 至少保持 1 个空闲子进程，以应对突发请求。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 如果空闲子进程少于这个值，PHP-FPM 会动态创建新的子进程。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min_spare_servers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置最大空闲子进程数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 最多允许保持 3 个空闲子进程。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 如果空闲子进程超过这个值，PHP-FPM 会终止多余的子进程以节省资源。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max_spare_servers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div>`,27)]))}const A=i(l,[["render",h]]);export{F as __pageData,A as default};
