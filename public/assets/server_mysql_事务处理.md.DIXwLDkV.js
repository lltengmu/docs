import{_ as s,c as e,o as t,ae as n}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"事务处理","description":"","frontmatter":{},"headers":[],"relativePath":"server/mysql/事务处理.md","filePath":"server/mysql/事务处理.md","lastUpdated":1734360942000}'),l={name:"server/mysql/事务处理.md"};function i(d,a,o,p,c,r){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="事务处理" tabindex="-1">事务处理 <a class="header-anchor" href="#事务处理" aria-label="Permalink to &quot;事务处理&quot;">​</a></h1><h2 id="什么是事务" tabindex="-1">什么是事务 <a class="header-anchor" href="#什么是事务" aria-label="Permalink to &quot;什么是事务&quot;">​</a></h2><p>数据库中的事务是指对数据库执行<strong>一批</strong>操作，在同一个事务当中，这些操作要么全部成功，要么全部失败，不会存在部分成功的情况。</p><ul><li>事务是一个原子操作。是一个最小的执行单元，可以由一条或者多条<code>sql</code>语句组成</li><li>在同一个事务当中，所有的<code>sql</code>语句都执行成功时，整个事务成功，有一个<code>sql</code>语句执行失败，则整个事务失败。</li></ul><h2 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h2><p>支持<strong>事务处理</strong>的存储引擎：<code>innoDB</code>。</p><h2 id="开启一个事务" tabindex="-1">开启一个事务 <a class="header-anchor" href="#开启一个事务" aria-label="Permalink to &quot;开启一个事务&quot;">​</a></h2><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BEGIN;</span></span>
<span class="line"><span>INSERT INTO stu(sname,class_id,sex)VALUES(&#39;Eddie&#39;,2,1);</span></span>
<span class="line"><span>INSERT INTO class(cname)VALUE(&quot;研究生班&quot;);</span></span>
<span class="line"><span>COMMIT;//提交事务</span></span></code></pre></div><h2 id="回滚" tabindex="-1">回滚 <a class="header-anchor" href="#回滚" aria-label="Permalink to &quot;回滚&quot;">​</a></h2><p>如果某一条<code>sql</code>语句执行失败或发生异常，则执行回滚。<code>ROLLBACK</code>会终止一个事务。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>START TRANSACTION;</span></span>
<span class="line"><span>INSERT INTO stu(sname,class_id,sex)VALUES(&#39;Eddie-1&#39;,2,1);</span></span>
<span class="line"><span>ROLLBACK;</span></span></code></pre></div><h2 id="全局事务" tabindex="-1">全局事务 <a class="header-anchor" href="#全局事务" aria-label="Permalink to &quot;全局事务&quot;">​</a></h2><p>全局事务的意思是：每一条<code>sql</code>语句的执行都是一个事务。</p><p>在每一次执行之后都要提交才能将数据存储到<code>myslq</code>中。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 开启全局事务</span></span>
<span class="line"><span>SET autocommit = 0;</span></span>
<span class="line"><span>INSERT INTO stu(sname,class_id,sex)VALUES(&quot;梨花&quot;,2,1);</span></span>
<span class="line"><span>COMMIT;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO stu(sname,class_id,sex)VALUES(&quot;梨花-2&quot;,2,1);</span></span>
<span class="line"><span>INSERT INTO stu(sname,class_id,sex)VALUES(&quot;梨花-3&quot;,2,1);</span></span>
<span class="line"><span>COMMIT;</span></span></code></pre></div><h2 id="事务隔离" tabindex="-1">事务隔离 <a class="header-anchor" href="#事务隔离" aria-label="Permalink to &quot;事务隔离&quot;">​</a></h2><h4 id="产生的原因" tabindex="-1">产生的原因 <a class="header-anchor" href="#产生的原因" aria-label="Permalink to &quot;产生的原因&quot;">​</a></h4><p>事务隔离是当高并发访问<code>mysql</code>执行事务时，多个事务会相互影响的问题。</p><h4 id="隔离级别" tabindex="-1">隔离级别 <a class="header-anchor" href="#隔离级别" aria-label="Permalink to &quot;隔离级别&quot;">​</a></h4><p>事务隔离级别是指在上述问题发生时，事务间的隔离程度。</p><table tabindex="0"><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td><td>最低的事务隔离级别，一个事务还没提交时，它做的变更就能被别的事务看到</td></tr><tr><td>不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td><td>保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td><td>多次读取同一范围的数据会返回第一次查询的快照，即使其他事务对该数据做了更新修改。事务在执行期间看到的数据前后必须是一致的。</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td><td>事务 100% 隔离，可避免脏读、不可重复读、幻读的发生。花费最高代价但最可靠的事务隔离级别。</td></tr></tbody></table><h4 id="查询级别" tabindex="-1">查询级别： <a class="header-anchor" href="#查询级别" aria-label="Permalink to &quot;查询级别：&quot;">​</a></h4><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select @@global.transaction_isolation,@@transaction_isolation;</span></span></code></pre></div><p>mysql8 以下版本使用这个<code>sql</code>语句查询隔离级别</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select @@tx_isolation;</span></span></code></pre></div><h4 id="设置隔离级别" tabindex="-1">设置隔离级别 <a class="header-anchor" href="#设置隔离级别" aria-label="Permalink to &quot;设置隔离级别&quot;">​</a></h4><p>会话隔离级别</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set session transaction isolation level read uncommitted;</span></span></code></pre></div><p>全局隔离级别：</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set global transaction isolation level read uncommitted;</span></span></code></pre></div>`,30)]))}const m=s(l,[["render",i]]);export{u as __pageData,m as default};
