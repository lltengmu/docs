import{_ as o,c,a0 as t,o as d}from"./chunks/framework.CoVXEd1Z.js";const r="/assets/code-runtime-cpu-1._epePaz3.png",p="/assets/CPU-internal-components.C5zUIQRf.png",s="/assets/CPU-register-classification.Da_je2Yn.png",a="/assets/Program-counter-execution-process.6JHI_j8W.png",i="/assets/Program-execution-process.YOMdBKMn.png",n="/assets/Flag-register-comparison-operation.BFugM2dW.png",l="/assets/Program-call-diagram.ZCQ7So_T.png",g="/assets/Function-call-program-counter.CT3Qt4Jr.png",u="/assets/Base-and-index-registers.B4sFtVa1.png",f=JSON.parse('{"title":"CPU","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/computer-basics/02.cpu.md","filePath":"web-development-basics/computer-basics/02.cpu.md","lastUpdated":1736416014000}'),P={name:"web-development-basics/computer-basics/02.cpu.md"};function m(C,e,U,_,h,b){return d(),c("div",null,e[0]||(e[0]=[t('<h1 id="cpu" tabindex="-1">CPU <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;CPU&quot;">​</a></h1><p><code>CPU</code>全称是<code>Central Processing Unit</code>，它是你电脑中最<code>硬核</code>的硬件，这种说法一点不为过。<code>CPU</code>是能够让你的计算机叫做<code>计算机的</code>的核心组件，但它却不能代表你的电脑，<code>CPU</code>与计算机的关系相当于大脑和人的关系。<code>CPU</code>的核心是从程序或应用程序获取指令并执行计算。此过程可以分为三个关键阶段：</p><ul><li>提取</li><li>解码</li><li>执行</li></ul><p><code>CPU</code>从系统的主存中提取指令，然后解码该指令的实际内容，然后再由<code>CPU</code>的相关部分执行该指令。</p><h2 id="cpu内部处理过程" tabindex="-1"><code>CPU</code>内部处理过程 <a class="header-anchor" href="#cpu内部处理过程" aria-label="Permalink to &quot;`CPU`内部处理过程&quot;">​</a></h2><p>下图展示了一般程序的运行流程（以C语言为例），可以说了解程序的运行流程是掌握程序运行机制的基础和前提。</p><p><img src="'+r+'" alt="code-runtime-cpu-1"></p><p>在这个流程中，<code>CPU</code>负责的就是<strong>解释</strong>和<strong>运行</strong>最终转换成机器语言的内容。</p><p><code>CPU</code>主要由两部分组成：<code>控制单元</code> 和 <code>算数逻辑单元（ALU）</code></p><ul><li>控制单元：从内存中提取指令并解码执行。</li><li>算数逻辑单元（ALU）：处理算数和逻辑运算</li></ul><p><code>CPU</code>是计算机的心脏和大脑，它和内存都是由许多晶体管组成的电子元件。它接收数据输入，执行指令并处理信息。它与输入输出（i/o）设备进行通信，这些设备向<code>CPU</code>发送数据和从<code>CPU</code>接收数据。</p><p>从功能来看，<code>CPU</code>的内部由<strong>寄存器</strong>，<strong>控制器</strong>，<strong>运算器</strong>和<strong>时钟</strong>四部分组成，个部分之间通过电信号连接。</p><p><img src="'+p+'" alt="CPU-internal-components"></p><ul><li><code>寄存器</code>：是中央处理器内的组成部分。它们可以用来暂存指令，数据和地址。可以将其看作是内存的一种。根据种类不同，一个<code>CPU</code>内部会有20~100 个寄存器。</li><li><code>控制器</code>：复杂把内存上的指令，数据读入寄存器，并根据指令的结果控制计算机</li><li><code>运算器</code>：复杂运算从内存中读入寄存器的数据。</li><li><code>时钟</code>：负责发出<code>CPU</code>开始计时的钟信号</li></ul><h2 id="cpu是一系列寄存器的集合体" tabindex="-1">CPU是一系列寄存器的集合体 <a class="header-anchor" href="#cpu是一系列寄存器的集合体" aria-label="Permalink to &quot;CPU是一系列寄存器的集合体&quot;">​</a></h2><p>在<code>CPU</code>的四个结构中，我们程序员只需要了解<code>寄存器</code>就可以了，其余三个不用过多关注，因为程序是把寄存器作为对象来描述的。</p><p>不同类型的<code>CPU</code>，其内部寄存器种类，数量以及寄存器存储的数据范围都是不同的。不过，根据功能不同，可以讲寄存器划分为以下这几类：</p><table tabindex="0"><thead><tr><th>种类</th><th>功能</th></tr></thead><tbody><tr><td>累加寄存器</td><td>存储运行的数据和运算后的数据。</td></tr><tr><td>标志寄存器</td><td>用于反应处理器的状态和运算结果的某些特征以及控制指令的执行。</td></tr><tr><td>程序计数器</td><td>程序计数器是用于存放下一条指令所在单元的地址的地方。</td></tr><tr><td>基址寄存器</td><td>存储数据内存的起始位置</td></tr><tr><td>变址寄存器</td><td>存储基址寄存器的相对地址</td></tr><tr><td>通用寄存器</td><td>存储任意数据</td></tr><tr><td>指令寄存器</td><td>储存正在被运行的指令，CPU内部使用，程序员无法对该寄存器进行读写</td></tr><tr><td>栈寄存器</td><td>存储栈区域的起始位置</td></tr></tbody></table><p>其中程序计数器，累加寄存器，标志寄存器，指令寄存器和栈寄存器都只有一个，其他寄存器一般有多个。</p><p><img src="'+s+'" alt="CPU-register-classification"></p><p>下面对各个寄存器进行说明：</p><p><strong>程序计数器</strong></p><p><code>程序计数器（Program Counter）</code>是用来存储下一条指令所在单元的地址。</p><p>程序执行时，<code>PC</code>的初值为程序第一条指令的地址，在顺序执行程序时，<code>控制器</code>首先按程序计数器所指出的指令地址从内存中取出一条指令，然后分析和执行该指令，同时将<code>PC</code>的值加1指向下一条执行的指令。</p><p>我们还是以一个示例为准来详细看一下程序计数器的执行过程。</p><p><img src="'+a+'" alt="Program-counter-execution-process"></p><p>这是一段进行相加的操作，程序启动，在经过编译解析之后会由操作系统把硬盘中的程序复制到内存中。示例中的程序是将<code>123</code> 和<code>456</code>执行相加操作，并将结果输出待显示器上。</p><p>地址<code>0100</code>是程序运行的起始位置。Windows等操作系统把程序从硬盘复制到内存之后会将程序计数器作为设定其实位置0100，然后执行程序，每执行一条指令后，程序计数器的数值会增加1（或者直接指向下一条指令的内存地址），然后，<code>CPU</code>就会根据程序计数器的数值，从内存中读取命令并执行，也就是说，程序计数器控制着程序的流程。</p><p><strong>条件分支和循环机制</strong></p><p>高级程序语言中的条件控制流程主要分为三种：</p><ul><li>顺序执行：按照地址的内容顺序的执行指令</li><li>条件执行：根据条件执行任意地址的指令</li><li>循环判断：重复执行同一地址的指令</li></ul><p>顺序执行的情况比较简单，每执行一条指令程序计数器的值就 +1。</p><p>条件和循环分支会使程序计数器的值指向任意地址，这样一来，程序便可以回到上一个地址来重复执行同一个指令，或者跳转到任意指令。</p><p>下面以条件分支为例来说明程序的执行过程：</p><p><img src="'+i+'" alt="Program-execution-process"></p><p>程序的开始过程和顺序是一样的，<code>CPU</code>从<code>0100</code>处开始执行命令，在<code>0100</code>和<code>0101</code>都是顺序执行，<code>PC</code>的值顺序+1,执行到<code>0102</code>地址指令时，判断<code>0106</code>寄存器的数值大于0，跳转到<code>0104</code>地址的指令，将数值输出到显示器中，然后结束程序，<code>0103</code>的指令被跳过了，这就是我们程序中的<code>if()</code>判断是一样的，在不满足条件的情况下，指令会直接跳过。所以<code>PC</code>的执行过程也就没有直接+1，而是下一条指令的地址。</p><p><strong>标志寄存器</strong></p><p>条件和循环分支会使到<code>jump(跳转指令)</code>，会根据当前的指令来判断是否跳转，上面我们提到了<code>标志寄存器</code>，无论当前累加寄存器的运算结果是正数、负数还是0，标志寄存器都会将其保存。</p><p><code>CPU</code>在进行运算是，标志寄存器的数值会根据当前运算的结果自动设定，运算结果的正、负和0三种状态由标志寄存器的三个位表示。标志寄存器的第一字节为单位、第二字节位、第三个字节位各自的结果都为1时，分别代表正数、0和负数。</p><p><img src="'+n+'" alt="Flag-register-comparison-operation"></p><p><code>CPU</code>的执行机制比较有意思，假设累加寄存器中存储的 XXX 和通用寄存器中存储的 YYY做比较，<code>CPU</code>的运算机制就会做减法运算。而无论减法运算的结果是正数、零还是负数，都会保存到标志寄存器中。结果为证表示 XXX 比 YYYY大，结果为0表示两者相等，结果为负表示 XXX 比 YYY小。程序比较的指令，实际上是<code>CPU</code>内部做<code>减法</code>运算。</p><p><strong>函数调用机制</strong></p><p>接下来，我们继续介绍函数调用机制，哪怕是高级语言编写的程序，函数调用处理也是把程序计数器的值设定成函数的存储地址来实现的。函数执行跳转指令后，必须进行返回处理，单纯的指令跳转没有意义，下面是一个实现函数跳转的例子。</p><p><img src="'+l+'" alt="Program-call-diagram"></p><p>图中将变量 a 和 b 分别赋值为 123 和 456 ，调用 MyFun(a,b) 方法，进行指令跳转。图中的地址是将 C 语言编译成机器语言后运行时的地址，由于1行 C 程序在编译后通常会变为多行机器语言，所以图中的地址是分散的。在执行完 MyFun(a,b)指令后，程序会返回到 MyFun(a,b) 的下一条指令，CPU 继续执行下面的指令。</p><p>函数的调用和返回很重要的两个指令是 <code>call</code> 和<code>return</code>， 指令，再将函数的入口地址设定到程序计数器之前，call 指令会把调用函数后要执行的指令地址存储在名为栈的主存内。函数处理完毕后，再通过函数的出口来执行 return 指令。return 指令的功能是把保存在栈中的地址设定到程序计数器。MyFun 函数在被调用之前，0154 地址保存在栈中，MyFun 函数处理完成后，会把 0154 的地址保存在程序计数器中。这个调用过程如下</p><p><img src="'+g+'" alt="Function-call-program-counter"></p><p>在一些高级语言的条件或者循环语句中，函数调用的处理会转换成 call 指令，函数结束后的处理则会转换成 return 指令。</p><p><strong>通过地址和索引实现数组</strong></p><p>接下来我们看一下基址寄存器和变址寄存器，通过这两个寄存器，我们可以对主存上的特定区域进行划分，来实现类似数组的操作，首先，我们用十六进制数将计算机内存上的 00000000 - FFFFFFFF 的地址划分出来。那么，凡是该范围的内存地址，只要有一个 32 位的寄存器，便可查看全部地址。但如果想要想数组那样分割特定的内存区域以达到连续查看的目的的话，使用两个寄存器会更加方便。</p><p>例如，我们用两个寄存器（基址寄存器和变址寄存器）来表示内存的值</p><p><img src="'+u+'" alt="Base-and-index-registers"></p><p>这种表示方式很类似数组的构造，<code>数组</code>是指同样长度的数据在内存中进行连续排列的数据构造。用数组名表示数组全部的值，通过索引来区分数组的各个数据元素，例如: a[0] - a[4]，<code>[]</code>内的 0 - 4 就是数组的下标。</p><h3 id="cpu-指令执行过程" tabindex="-1">CPU 指令执行过程 <a class="header-anchor" href="#cpu-指令执行过程" aria-label="Permalink to &quot;CPU 指令执行过程&quot;">​</a></h3><p>几乎所有的冯·诺伊曼型计算机的CPU，其工作都可以分为5个阶段：<strong>取指令、指令译码、执行指令、访存取数、结果写回</strong>。</p><ul><li><code>取指令</code>阶段是将内存中的指令读取到 CPU 中寄存器的过程，程序寄存器用于存储下一条指令所在的地址</li><li><code>指令译码</code>阶段，在取指令完成后，立马进入指令译码阶段，在指令译码阶段，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。</li><li><code>执行指令</code>阶段，译码完成后，就需要执行这一条指令了，此阶段的任务是完成指令所规定的各种操作，具体实现指令的功能。</li><li><code>访问取数</code>阶段，根据指令的需要，有可能需要从内存中提取数据，此阶段的任务是：根据指令地址码，得到操作数在主存中的地址，并从主存中读取该操作数用于运算。</li><li><code>结果写回</code>阶段，作为最后一个阶段，结果写回（Write Back，WB）阶段把执行指令阶段的运行结果数据“写回”到某种存储形式：结果数据经常被写到CPU的内部寄存器中，以便被后续的指令快速地存取；</li></ul>',56)]))}const x=o(P,[["render",m]]);export{f as __pageData,x as default};
