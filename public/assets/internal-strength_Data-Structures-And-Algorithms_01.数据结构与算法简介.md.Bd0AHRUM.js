import{_ as a,c as e,o as l,ae as r}from"./chunks/framework.Dh1jimFm.js";const i="/assets/relationship_between_data_structure_and_algorithm.z5UbgwGS.png",c=JSON.parse('{"title":"算法是什么","description":"","frontmatter":{},"headers":[],"relativePath":"internal-strength/Data-Structures-And-Algorithms/01.数据结构与算法简介.md","filePath":"internal-strength/Data-Structures-And-Algorithms/01.数据结构与算法简介.md","lastUpdated":1736416014000}'),o={name:"internal-strength/Data-Structures-And-Algorithms/01.数据结构与算法简介.md"};function n(s,t,u,_,d,p){return l(),e("div",null,t[0]||(t[0]=[r('<h1 id="算法是什么" tabindex="-1">算法是什么 <a class="header-anchor" href="#算法是什么" aria-label="Permalink to &quot;算法是什么&quot;">​</a></h1><h2 id="算法定义" tabindex="-1">算法定义 <a class="header-anchor" href="#算法定义" aria-label="Permalink to &quot;算法定义&quot;">​</a></h2><p><u>算法（algorithm）</u>是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性。</p><ul><li>问题是明确的，包含清晰的输入和输出定义。</li><li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li><li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li></ul><h2 id="数据结构定义" tabindex="-1">数据结构定义 <a class="header-anchor" href="#数据结构定义" aria-label="Permalink to &quot;数据结构定义&quot;">​</a></h2><p><u>数据结构（data structure）</u>是组织和存储数据的方式，涵盖数据内容、数据之间关系和数据操作方法，它具有以下设计目标。</p><ul><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ul><p><strong>数据结构设计是一个充满权衡的过程</strong>。如果想在某方面取得提升，往往需要在另一方面作出妥协。下面举两个例子。</p><ul><li>链表相较于数组，在数据添加和删除操作上更加便捷，但牺牲了数据访问速度。</li><li>图相较于链表，提供了更丰富的逻辑信息，但需要占用更大的内存空间。</li></ul><h2 id="数据结构与算法的关系" tabindex="-1">数据结构与算法的关系 <a class="header-anchor" href="#数据结构与算法的关系" aria-label="Permalink to &quot;数据结构与算法的关系&quot;">​</a></h2><p>如下图所示，数据结构与算法高度相关、紧密结合，具体表现在以下三个方面。</p><ul><li>数据结构是算法的基石。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li>算法为数据结构注入生命力。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构实现，但执行效率可能相差很大，选择合适的数据结构是关键。</li></ul><p><img src="'+i+'" alt="数据结构与算法的关系"></p><p>值得说明的是，数据结构与算法是独立于编程语言的。正因如此，本书得以提供基于多种编程语言的实现。</p><blockquote><p>tip &quot;约定俗成的简称&quot;</p><p>在实际讨论时，我们通常会将“数据结构与算法”简称为“算法”。比如众所周知的 LeetCode 算法题目，实际上同时考查数据结构和算法两方面的知识。</p></blockquote>',15)]))}const m=a(o,[["render",n]]);export{c as __pageData,m as default};
