import{_ as i,c as e,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const r=JSON.parse('{"title":"useEffect","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/react/hooks/副作用/useEffect.md","filePath":"front-end/react/hooks/副作用/useEffect.md","lastUpdated":1734360942000}'),l={name:"front-end/react/hooks/副作用/useEffect.md"};function n(h,s,p,o,c,d){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h1><p><code>useEffect</code> 是 React 中用于处理<code>副作用</code>的钩子。</p><p>并且<code>useEffect</code> 还在这里让函数式组件充当<code>class</code>组件的生命周期函数，在之前你可能会在类组件中使用 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 来处理这些生命周期事件。</p><p>在使用服务端渲染的框架时，<code>Effect</code> 函数只会在客户端上运行。</p><h2 id="什么是副作用函数-什么是纯函数" tabindex="-1">什么是副作用函数，什么是纯函数？ <a class="header-anchor" href="#什么是副作用函数-什么是纯函数" aria-label="Permalink to &quot;什么是副作用函数，什么是纯函数？&quot;">​</a></h2><h3 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h3><ol><li>输入决定输出：相同的输入永远会得到相同的输出。这意味着函数的行为是可预测的。</li><li>无副作用：纯函数<code>不会修改外部状态</code>，也不会依赖外部可变状态。因此，纯函数内部的操作不会影响外部的变量、文件、数据库等。</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//7</span></span></code></pre></div><h3 id="副作用函数" tabindex="-1">副作用函数 <a class="header-anchor" href="#副作用函数" aria-label="Permalink to &quot;副作用函数&quot;">​</a></h3><p>副作用函数 指的是那些在执行时会改变外部状态或依赖外部可变状态的函数。</p><ul><li>操作引用类型</li><li>操作本地存储例如<code>localStorage</code></li><li>调用外部API，例如<code>fetch</code> <code>ajax</code></li><li>操作<code>DOM</code></li><li>计时器</li></ul><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(setup, dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><p><code>setup</code>：处理<code>Effect</code>(副作用)的函数，该函数可以选择性的返回一个<strong>清理函数</strong>(clean up)。当组件被添加到DOM的时候，React会运行 该函数。组件从DOM移除后，React 会最后一次运行 <strong>clean up</strong>函数。</p></li><li><p>依赖项数组：可选参数，当依赖发生变化的时候重新执行<code>Effect</code>函数。</p><ul><li><p>没有提供该参数时会在每次组件渲染的时候执行 <code>Effect</code>函数。</p></li><li><p>提供了空数组时，只会在组件<strong>初始渲染</strong>时候执行一次<code>Effect</code>函数。</p></li><li><p>提供了依赖项时，当依赖数据发生变化的时候，React会使用<code>Object.is</code>对数组的每个元素与它先前的值进行比较，来决定是不是需要重新运行<code>Effect</code> 函数。</p></li></ul></li></ol>`,14)]))}const E=i(l,[["render",n]]);export{r as __pageData,E as default};
