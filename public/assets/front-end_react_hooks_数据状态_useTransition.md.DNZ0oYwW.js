import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"useTransition","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/react/hooks/数据状态/useTransition.md","filePath":"front-end/react/hooks/数据状态/useTransition.md","lastUpdated":1734360942000}'),e={name:"front-end/react/hooks/数据状态/useTransition.md"};function h(p,s,l,o,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="usetransition" tabindex="-1">useTransition <a class="header-anchor" href="#usetransition" aria-label="Permalink to &quot;useTransition&quot;">​</a></h1><p><code>useTransiton</code> 是一个帮助你在不阻塞UI的情况下更新状态的hook</p><h2 id="语法" tabindex="-1">语法： <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法：&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>useTransition</code>不需要参数</p><ol><li><code>isPending</code> 是否存在待处理的 <code>transiion</code></li><li><code>startTransition</code>函数，使用此函数将状态更新为<code>transition</code></li></ol><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="将状态更新-标记为非阻塞的-transition" tabindex="-1">将状态更新 标记为非阻塞的 transition <a class="header-anchor" href="#将状态更新-标记为非阻塞的-transition" aria-label="Permalink to &quot;将状态更新 标记为非阻塞的 transition&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TabContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isPending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //这里有个tab state </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> selectTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nextTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //通过useTransition hook 返回的 setTransition 函数，标记对tab state 的更新是非阻塞的 transition</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nextTab);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过<code>transition</code> ，UI仍将在重新渲染过程中保持响应性。</p><p>在官网的tab选项卡的例子中，又一个<code>state</code> tab 管理状态，根据tab 的值确定哪个选项卡被渲染。</p><p>在没有使用<code>useTransition</code>的情况下，当点击其中某个选项卡的渲染过程比较缓慢的情况下，再去点击其他选项卡时就会卡顿。比如有两个组件，<code>home</code> 和<code>contact</code>，假设<code>home</code>组件渲染需要5秒，<code>contact</code>组件正常渲染。我点击<code>home</code> tab之后又立即点击了<code>contact</code> tab，因为<code>home</code>组件渲染需要5秒，所有不会立即渲染<code>contact</code> 组件的内容，而是需要等待<code>home</code>组件渲染完成，阻塞了UI的渲染。</p><p>使用<code>useTransition</code> hook可以解决这个问题。在上面的代码中，<code>setTransition</code> 函数，标记对<code>tab</code> state 的更新是非阻塞的 <code>transition</code>，</p><p>这时候尝试上面的操作，点击<code>home</code> tab 之后立即点击<code>contact</code> tab,<code>contact</code> 组件会立即响应，而不需要等待<code>home</code>组件渲染完成。</p>`,14)]))}const E=i(e,[["render",h]]);export{c as __pageData,E as default};
