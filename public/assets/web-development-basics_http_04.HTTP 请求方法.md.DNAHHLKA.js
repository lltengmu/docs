import{_ as e,c as l,o as d,ae as a}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"HTTP 请求方法","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/http/04.HTTP 请求方法.md","filePath":"web-development-basics/http/04.HTTP 请求方法.md","lastUpdated":1734360942000}'),s={name:"web-development-basics/http/04.HTTP 请求方法.md"};function n(i,t,T,r,f,x){return d(),l("div",null,t[0]||(t[0]=[a('<h1 id="http-请求方法" tabindex="-1">HTTP 请求方法 <a class="header-anchor" href="#http-请求方法" aria-label="Permalink to &quot;HTTP 请求方法&quot;">​</a></h1><p>HTTP 请求方法定义了客户端向服务端之间的通信方式。</p><p>根据HTTP 标准，HTTP请求可以使用多种请求方法。</p><p>HTTP 请求方法列表：</p><table tabindex="0"><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">GET</td><td style="text-align:left;">从服务器获取资源。用于请求数据而不对数据进行更改。例如，从服务器获取网页、图片等。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">POST</td><td style="text-align:left;">向服务器发送数据以创建新资源。常用于提交表单数据或上传文件。发送的数据包含在请求体中。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">PUT</td><td style="text-align:left;">向服务器发送数据以更新现有资源。如果资源不存在，则创建新的资源。与 POST 不同，PUT 通常是幂等的，即多次执行相同的 PUT 请求不会产生不同的结果。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">DELETE</td><td style="text-align:left;">从服务器删除指定的资源。请求中包含要删除的资源标识符。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">PATCH</td><td style="text-align:left;">对资源进行部分修改。与 PUT 类似，但 PATCH 只更改部分数据而不是替换整个资源。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">HEAD</td><td style="text-align:left;">类似于 GET，但服务器只返回响应的头部，不返回实际数据。用于检查资源的元数据（例如，检查资源是否存在，查看响应的头部信息）。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">OPTIONS</td><td style="text-align:left;">返回服务器支持的 HTTP 方法。用于检查服务器支持哪些请求方法，通常用于跨域资源共享（CORS）的预检请求。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">TRACE</td><td style="text-align:left;">回显服务器收到的请求，主要用于诊断。客户端可以查看请求在服务器中的处理路径。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">CONNECT</td><td style="text-align:left;">建立一个到服务器的隧道，通常用于 HTTPS 连接。客户端可以通过该隧道发送加密的数据。</td></tr></tbody></table>',5)]))}const _=e(s,[["render",n]]);export{g as __pageData,_ as default};
