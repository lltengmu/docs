import{_ as t,c as a,a0 as s,o}from"./chunks/framework.CoVXEd1Z.js";const p=JSON.parse('{"title":"useLayoutEffect","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/react/hooks/副作用/useLayoutEffect.md","filePath":"front-end/react/hooks/副作用/useLayoutEffect.md","lastUpdated":1734360942000}'),c={name:"front-end/react/hooks/副作用/useLayoutEffect.md"};function i(f,e,d,n,l,r){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="uselayouteffect" tabindex="-1">useLayoutEffect <a class="header-anchor" href="#uselayouteffect" aria-label="Permalink to &quot;useLayoutEffect&quot;">​</a></h1><p><code>useLayoutEffect</code> 是 <code>useEffect</code> 的一个版本。在浏览器重新绘制屏幕之前触发。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useLayoutEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(setup, dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>参数讲解跟<code>useEffect</code>一样，<a href="./useEffect.html">查看 useEffect</a></p><h2 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><ol><li><code>uselayoutEffect</code>内部的代码会阻塞浏览器重新绘制屏幕，过度使用该 hook会导致app 运行缓慢。</li><li>如果你在 <code>useLayoutEffect</code> 内部触发状态更新，React 将立即执行所有剩余的 Effects，包括 <code>useEffect</code>。</li></ol>',7)]))}const h=t(c,[["render",i]]);export{p as __pageData,h as default};
