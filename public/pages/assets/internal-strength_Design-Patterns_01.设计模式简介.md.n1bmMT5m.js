import{_ as a,c as r,a0 as n,o}from"./chunks/framework.CoVXEd1Z.js";const c=JSON.parse('{"title":"设计模式简介","description":"","frontmatter":{},"headers":[],"relativePath":"internal-strength/Design-Patterns/01.设计模式简介.md","filePath":"internal-strength/Design-Patterns/01.设计模式简介.md","lastUpdated":1734360942000}'),e={name:"internal-strength/Design-Patterns/01.设计模式简介.md"};function l(s,t,i,g,h,d){return o(),r("div",null,t[0]||(t[0]=[n('<h1 id="设计模式简介" tabindex="-1">设计模式简介 <a class="header-anchor" href="#设计模式简介" aria-label="Permalink to &quot;设计模式简介&quot;">​</a></h1><h2 id="认识设计模式" tabindex="-1">认识设计模式 <a class="header-anchor" href="#认识设计模式" aria-label="Permalink to &quot;认识设计模式&quot;">​</a></h2><p><strong>设计模式（Design pattern）</strong> 是解决<strong>软件开发</strong>某些特定问题而提出的一些解决方案也可以理解成解决问题的一些思路。通过设计模式可以帮助我们增强代码的可重用性、可扩充性、 可维护性、灵活性好。我们使用设计模式最终的目的是实现代码的 <strong>高内聚</strong> 和 <strong>低耦合</strong>。</p><h2 id="高内聚和低耦合" tabindex="-1">高内聚和低耦合 <a class="header-anchor" href="#高内聚和低耦合" aria-label="Permalink to &quot;高内聚和低耦合&quot;">​</a></h2><p>举例一个例子，比如有一个公司，各个部门各司其职，互不干涉。各个部门需要合作时通过专门的负责人进行对接。</p><p>在软件开发中也是一样的，一个功能模块应该只是关注一个功能，一个模块最好只实现一个功能。这个是<strong>内聚</strong>。</p><p>模块与模块之间、系统与系统之间的交互，是不可避免的， 所以我们要尽量减少由于交互引起的单个模块无法独立使用或者无法移植的情况发生， 尽可能多的单独提供接口用于对外操作， 这个就是所谓的<strong>低耦合</strong>。</p><h2 id="设计模式的6大原则" tabindex="-1">设计模式的6大原则 <a class="header-anchor" href="#设计模式的6大原则" aria-label="Permalink to &quot;设计模式的6大原则&quot;">​</a></h2><h4 id="_1-单一职责原则" tabindex="-1">1. 单一职责原则 <a class="header-anchor" href="#_1-单一职责原则" aria-label="Permalink to &quot;1. 单一职责原则&quot;">​</a></h4><ul><li><strong>定义</strong>：一个类应该只有一个引起它变化的原因，即一个类只负责一个功能或一个职责。</li><li><strong>目的</strong>：降低类的复杂度，提高类的可读性、可维护性和变更引起的风险降低。</li><li><strong>实现</strong>：通过拆分职责到不同的类或模块中，确保每个类或模块都有明确的职责。</li></ul><h4 id="_2-开闭原则" tabindex="-1">2. 开闭原则 <a class="header-anchor" href="#_2-开闭原则" aria-label="Permalink to &quot;2. 开闭原则&quot;">​</a></h4><ul><li><strong>定义</strong>：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。</li><li><strong>目的</strong>：提高软件系统的可扩展性和可维护性，避免因为修改已有代码而引入新的错误。</li><li><strong>实现</strong>：通过使用接口和抽象类，为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</li></ul><h4 id="_3-里氏替换原则" tabindex="-1">3. 里氏替换原则 <a class="header-anchor" href="#_3-里氏替换原则" aria-label="Permalink to &quot;3. 里氏替换原则&quot;">​</a></h4><ul><li><strong>定义</strong>：子类必须能够替换其父类，并且替换后，程序的行为应与预期一致。</li><li><strong>目的</strong>：确保继承关系的正确性，避免子类破坏父类的行为。</li><li><strong>实现</strong>：在继承关系中，子类应遵守父类的行为规范，确保替换后系统的正确性。</li></ul><h4 id="_4-依赖倒置原则" tabindex="-1">4. 依赖倒置原则 <a class="header-anchor" href="#_4-依赖倒置原则" aria-label="Permalink to &quot;4. 依赖倒置原则&quot;">​</a></h4><ul><li><strong>定义</strong>：高层模块不应该依赖于低层模块，二者都应该依赖于其抽象；抽象不应该依赖于细节，细节应该依赖于抽象。</li><li><strong>目的</strong>：降低高层模块与低层模块之间的耦合度，提高系统的可扩展性和可维护性。</li><li><strong>实现</strong>：通过面向接口或抽象类编程，实现高层模块与低层模块之间的解耦。</li></ul><h4 id="_5-接口隔离原则" tabindex="-1">5. 接口隔离原则 <a class="header-anchor" href="#_5-接口隔离原则" aria-label="Permalink to &quot;5. 接口隔离原则&quot;">​</a></h4><ul><li><strong>定义</strong>：客户端不应该被迫依赖于它们不使用的方法；接口应该小而专一，只包含客户端需要的方法。</li><li><strong>目的</strong>：使接口更加灵活，易于维护和扩展，避免因为接口过于庞大而导致的问题。</li><li><strong>实现</strong>：将大接口拆分成多个小接口，每个接口只包含客户端需要的方法。</li></ul><h4 id="_6-迪米特法则" tabindex="-1">6. 迪米特法则 <a class="header-anchor" href="#_6-迪米特法则" aria-label="Permalink to &quot;6. 迪米特法则&quot;">​</a></h4><ul><li><strong>定义</strong>：一个对象应该对其他对象有最少的了解，只与直接相关的对象进行交互。</li><li><strong>目的</strong>：降低系统的复杂度，提高系统的可维护性和可扩展性。</li><li><strong>实现</strong>：通过限制对象之间的通信宽度和深度，实现系统的模块化设计。</li></ul>',20)]))}const _=a(e,[["render",l]]);export{c as __pageData,_ as default};
