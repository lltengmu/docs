import{_ as o,c as t,a0 as l,o as i}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"HTTPS 消息结构","description":"","frontmatter":{},"headers":[],"relativePath":"web-development-basics/http/03.HTTP 消息结构.md","filePath":"web-development-basics/http/03.HTTP 消息结构.md","lastUpdated":1734360942000}'),n={name:"web-development-basics/http/03.HTTP 消息结构.md"};function s(r,e,d,a,c,p){return i(),t("div",null,e[0]||(e[0]=[l('<h1 id="https-消息结构" tabindex="-1">HTTPS 消息结构 <a class="header-anchor" href="#https-消息结构" aria-label="Permalink to &quot;HTTPS 消息结构&quot;">​</a></h1><p>HTTP 是基于客户端/服务端的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p><p><code>HTTP</code>消息分为两种类型：</p><ul><li>请求消息</li><li>响应消息</li></ul><p>一个<code>HTTP</code>客户端是一个应用程序（Web浏览器或者其他任何客户端），通过连接到服务器达到向服务器发送一个或者多个<code>HTTP</code>请求的目的。</p><p>一个<code>HTTP</code>服务器同样也是一个应用程序（通常是一个web服务器），通过接收客户端的请求并向客户端发送<code>HTTP</code>响应数据。</p><h2 id="客户端请求消息" tabindex="-1">客户端请求消息 <a class="header-anchor" href="#客户端请求消息" aria-label="Permalink to &quot;客户端请求消息&quot;">​</a></h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p><ul><li><p><strong>请求行</strong>（Request Line）：</p><ul><li><strong>方法</strong>：如 GET、POST、PUT、DELETE等，指定要执行的操作。</li><li><strong>请求 URI</strong>（统一资源标识符）：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。</li><li><strong>HTTP 版本</strong>：如 HTTP/1.1 或 HTTP/2。</li></ul><p>请求行的格式示例：<code>GET /index.html HTTP/1.1</code></p></li><li><p><strong>请求头</strong>（Request Headers）：</p><ul><li>包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。</li><li>常见的请求头包括<code>Host</code>、<code>User-Agent</code>、<code>Accept</code>、<code>Accept-Encoding</code>、<code>Content-Length</code>等。</li></ul></li><li><p><strong>空行</strong>：</p><ul><li>请求头和请求体之间的分隔符，表示请求头的结束。</li></ul></li><li><p><strong>请求体</strong>（可选）：</p><ul><li>在某些类型的HTTP请求（如 POST 和 PUT）中，请求体包含要发送给服务器的数据。</li></ul></li></ul><h2 id="服务端响应消息" tabindex="-1">服务端响应消息 <a class="header-anchor" href="#服务端响应消息" aria-label="Permalink to &quot;服务端响应消息&quot;">​</a></h2><p>HTTP 响应也由四个部分组成，分别是：</p><ul><li><p><strong>状态行</strong>（Status Line）：</p><ul><li><strong>HTTP 版本</strong>：与请求消息中的版本相匹配。</li><li><strong>状态码</strong>：三位数，表示请求的处理结果，如 200 表示成功，404 表示未找到资源。</li><li><strong>状态信息</strong>：状态码的简短描述。</li></ul><p>状态行的格式示例：<code>HTTP/1.1 200 OK</code></p></li><li><p><strong>响应头</strong>（Response Headers）：</p><ul><li>包含了服务器环境信息、响应体的大小、服务器支持的压缩类型等。</li><li>常见的响应头包括<code>Content-Type</code>、<code>Content-Length</code>、<code>Server</code>、<code>Set-Cookie</code>等。</li></ul></li><li><p><strong>空行</strong>：</p><ul><li>响应头和响应体之间的分隔符，表示响应头的结束。</li></ul></li><li><p><strong>响应体</strong>（可选）：</p><ul><li>包含服务器返回的数据，如请求的网页内容、图片、JSON数据等。</li></ul></li></ul>',12)]))}const g=o(n,[["render",s]]);export{u as __pageData,g as default};
