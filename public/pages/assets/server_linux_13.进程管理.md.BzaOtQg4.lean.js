import{_ as s,c as a,a0 as i,o as p}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"进程管理","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/13.进程管理.md","filePath":"server/linux/13.进程管理.md","lastUpdated":1734757381000}'),d={name:"server/linux/13.进程管理.md"};function o(l,e,c,t,n,h){return p(),a("div",null,e[0]||(e[0]=[i(`<h1 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h1><p>操作系统都有进程的概念，Windows中在任务管理器中查看，Linux使用<code>ps -ef</code>指令查看进程。</p><h2 id="查看和关闭进程" tabindex="-1">查看和关闭进程 <a class="header-anchor" href="#查看和关闭进程" aria-label="Permalink to &quot;查看和关闭进程&quot;">​</a></h2><p>程序：安装到你电脑或者手机上的程序文件。</p><p>进程：正在运行的程序。</p><ol><li><p>查看进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ps -ef</span></span></code></pre></div><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UID          PID    PPID  C STIME TTY          TIME CMD</span></span>
<span class="line"><span>root           1       0  0  2023 ?        00:10:18 /usr/lib/systemd/systemd --switched-root --system --deserialize 17</span></span>
<span class="line"><span>root           2       0  0  2023 ?        00:00:05 [kthreadd]</span></span></code></pre></div><ul><li><code>UID</code>：全称<code>user id</code>，是进程所属用户，也就是哪个用户启动的。</li><li><code>PID</code>：全称<code>process id</code>，是进程编号，每次启动某个程序，他的编号可能都不一样，是启动之后系统随机分配的。</li><li><code>PPID</code>：全称<code>parent process id</code>，父进程，记录的是某个进程是由哪个进程创建出来的。可以使用<code>pstree</code>工具查看从属关系。</li><li><code>C</code>：不用管。</li><li><code>STIME</code>：全称<code>start time</code>，进程启动时间。</li><li><code>TTY</code>：用于显示哪些进程是本地启动的，哪些是远程连接启动的。可以使用<code>w</code>查看哪些终端远程连接主机。</li><li><code>TIME</code>：没啥用。</li><li><code>CMD</code>：进程执行了什么任务。</li></ul></li><li><p>关闭进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kill pid号</span></span></code></pre></div><ul><li><p>使用进程<code>id</code>终止进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kill 2</span></span></code></pre></div></li><li><p>批量关闭进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pkill CMD命令名称</span></span></code></pre></div></li><li><p><code>kill -9</code></p><p>这个强大和危险的命令强迫进程咋运行时突然终止，进程结束后不能自我清理。危害是导致系统资源无法释放，一般不退家使用，除非其他办法都无效。</p></li><li><p>如果想把某个远程连接踢下线，可以终止现象<code>pts</code>的远程连接的进程的父进程。</p></li></ul></li></ol><h2 id="查看计算机硬件信息" tabindex="-1">查看计算机硬件信息 <a class="header-anchor" href="#查看计算机硬件信息" aria-label="Permalink to &quot;查看计算机硬件信息&quot;">​</a></h2><ol><li><p>查看<code>CPU</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lscpu</span></span></code></pre></div></li><li><p>查看内存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>free -h</span></span></code></pre></div></li><li><p>查看硬盘命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>df -h</span></span></code></pre></div><p>含有<code>tmp</code>的表示是内存给硬盘的空间</p></li><li><p>查看计算机的<code>CPU</code>，内存，进程等信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>top</span></span></code></pre></div><p>输出如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>top - 13:48:09 up 411 days, 17:04,  3 users,  load average: 0.00, 0.02, 0.05</span></span>
<span class="line"><span>Tasks: 161 total,   1 running, 160 sleeping,   0 stopped,   0 zombie</span></span>
<span class="line"><span>%Cpu(s):  1.0 us,  0.7 sy,  0.0 ni, 97.8 id,  0.2 wa,  0.3 hi,  0.0 si,  0.0 st</span></span>
<span class="line"><span>MiB Mem :   1887.4 total,    208.4 free,   1130.4 used,    548.6 buff/cache</span></span>
<span class="line"><span>MiB Swap:   1025.0 total,      2.0 free,   1023.0 used.    600.5 avail Mem</span></span></code></pre></div><ul><li><p><code>13:48:09 up 411 days</code>：表示系统当前时间是<code>13:48:09</code>，已经开机了<code>411 days</code>。</p></li><li><p><code>3 users</code>：表示当前有三个用户在连接主机。</p></li><li><p><code>load average: 0.00, 0.02, 0.05</code>：平均负载，指的是<code>CPU</code>的负载高不高，<code>CPU</code>负载高，那么平均负载荷就比较大。</p></li><li><p><code>Tasks: 161 total, 1 running, 160 sleeping, 0 stopped, 0 zombie</code>：表示进程数量，总共 161个，一个正在运行，160 个正在休眠。当<code>CPU</code> 内核是是1核的时候，是在所有进程之间来回切换执行，所以只有一个或者怯寒很快的时候会显示2. <code>0 stopped</code>表示停止的进程，但是这里一般都是0，因为进程结束之后会在内存中释放。<code>0 zombie</code>表示僵尸进程数量，僵尸进程是杀不死的，就是由于各种原因，系统无法自动释放内存的进程，僵尸进程也消耗系统资源。</p></li><li><p><code>%Cpu(s): 1.0 us, 0.7 sy, 0.0 ni, 97.8 id, 0.2 wa, 0.3 hi, 0.0 si, 0.0 st</code>：</p><p>关于<code>CPU</code>其他参数不用看，只看<code>97.8 id</code>，id是<code>idle</code>的缩写，表示<code>97.8%</code> 空闲。</p></li><li><p><code>MiB Mem : 1887.4 total, 208.4 free, 1130.4 used, 548.6 buff/cache</code>：</p><p>表示内存使用情况，<code>1887.4 total</code>是总内存量，<code>208.4 free</code>，表示剩余用量，<code>1130.4 used</code>表示已使用量，<code>buff/cache</code>表示用作缓存，这个参数不用管。</p></li><li><p><code>MiB Swap: 1025.0 total, 2.0 free, 1023.0 used. 600.5 avail Mem </code>：</p><p><code>Swap</code>表示虚拟内存，这时硬盘分配给内存的一部分空间，为了当内存不足时，临时将硬盘当作内存使用。这个数值是可以自行调整的。一般自动分配就好了，所以这部分也不用管。</p></li></ul></li></ol>`,8)]))}const g=s(d,[["render",o]]);export{u as __pageData,g as default};
