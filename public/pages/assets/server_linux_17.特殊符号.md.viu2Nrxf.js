import{_ as o,c as a,a0 as c,o as d}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"特殊符号","description":"","frontmatter":{},"headers":[],"relativePath":"server/linux/17.特殊符号.md","filePath":"server/linux/17.特殊符号.md","lastUpdated":1734757381000}'),l={name:"server/linux/17.特殊符号.md"};function s(i,e,t,p,n,h){return d(),a("div",null,e[0]||(e[0]=[c('<h1 id="特殊符号" tabindex="-1">特殊符号 <a class="header-anchor" href="#特殊符号" aria-label="Permalink to &quot;特殊符号&quot;">​</a></h1><p>Linux中的特殊符号在命令行操作和脚本编写中起着重要作用。</p><h2 id="常见操作符" tabindex="-1">常见操作符 <a class="header-anchor" href="#常见操作符" aria-label="Permalink to &quot;常见操作符&quot;">​</a></h2><ol><li><p>管道符 (<code>|</code>)：将一个命令的输出作为另一个命令的输入。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls | grep .js</span></span></code></pre></div><p>指令会列出当前目录下所有包含<code>.js</code>关键字的文件和目录。</p></li><li><p>输出重定向符 <code>&gt;</code>：将命令的输出写入文件中，覆盖原有的内容。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo &quot;Hello world&quot; &gt; example.txt</span></span></code></pre></div><p>指令会将文本<code>hello world</code>写入名为<code>example.txt</code>的文件中并覆盖原有内容，如果文件不存在则自动创建。</p></li><li><p>追加输出符 <code>&gt;&gt;</code>：将命令的输出追加到文件的末尾，而不是覆盖原有的内容。用法与<code>&gt;</code>类似，但会保留原文件内容。</p></li><li><p>输入重定向符 <code>&lt;</code>：从文件中读区数据作为命令的输入。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat &lt; example.html</span></span></code></pre></div><p>指令会从<code>example.html</code>读区文件内容并输出到终端。</p></li><li><p>后台运行符 <code>&amp;</code>：使命令在后台运行而不占用终端。</p></li><li><p>分号符<code>;</code>：用于在一行中一次执行多个命令。</p></li><li><p>变量替换符<code>**</code>：用户引用环境变量或脚本中定义的变量。</p></li><li><p>子<code>shell</code>符号：用于将一组命令放到心的shell中执行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(ls &amp;&amp; echo &quot;list success&quot;) || (echo &quot;list failed)</span></span></code></pre></div><p>会在子shell中执行<code>ls</code>命令，并根据其执行结果输出相应的信息。</p></li></ol><h2 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h2><ol><li>多字通配符 <code>*</code>：匹配任意字符或字符串（用于匹配多个字符）。例如<code>ls *.js</code>会列出所有以<code>.js</code>结尾的文件</li><li>单字通配符 <code>?</code>：匹配单个字符，例如<code>ls ca?.js</code>会匹配文件名中第三个字符为任意字符且以<code>.js</code>结尾的文件，如<code>cat.js</code></li></ol><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><ol><li>逻辑与运算 <code>&amp;&amp;</code>：当第一个命令执行成功之后才会执行第二个命令。例如，<code>ls -l &amp;&amp; echo &quot;list success&quot;</code>，会在<code>ls -l</code>命令成功执行之后输出<code>“list sucess”</code>。</li><li>逻辑或运算符 <code>||</code>：当第一个命令执行失败才执行第二个命令。</li></ol><h2 id="其他特殊符号" tabindex="-1">其他特殊符号 <a class="header-anchor" href="#其他特殊符号" aria-label="Permalink to &quot;其他特殊符号&quot;">​</a></h2><ol><li><code>#</code> ：通常用作注释符号，出现在一行的开头或完整指令之后，表示符号后面的内容是注释文字，不会被执行。但在某些情况下（如脚本的第一行<code>#!/bin/bash</code>，井号具有特殊意义。</li><li>波浪号<code>~</code>：代表用户的<code>home</code>目录，例如，<code>cd ~</code> 会切换到用户的<code>home</code>目录。</li><li>点号<code>.</code>：一个点号代表当前目录，两个点号代表上层目录。在路径表示中常用。</li><li>反斜杠<code>\\</code>:用作转义字符，取消特殊符号的作用或连接到下一行。</li><li>惊叹号<code>!</code>：在逻辑运算符中表示<code>非</code>的意思。在<code>history</code>命令中惊叹号还有特殊用法，比如<code>!mv</code>会执行<code>history</code>列表中最近执行的<code>mv</code>命令。</li><li>花括号<code>{}</code>：用于匹配花括号内的任意一个字符串。例如，<code>echo {a,b,c}</code>会输出<code>a,b,c</code>。</li></ol>',10)]))}const m=o(l,[["render",s]]);export{u as __pageData,m as default};
