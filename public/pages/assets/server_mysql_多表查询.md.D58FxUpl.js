import{_ as s,c as e,a0 as t,o as i}from"./chunks/framework.CoVXEd1Z.js";const u=JSON.parse('{"title":"多表查询","description":"","frontmatter":{},"headers":[],"relativePath":"server/mysql/多表查询.md","filePath":"server/mysql/多表查询.md","lastUpdated":1734360942000}'),l={name:"server/mysql/多表查询.md"};function n(o,a,d,c,p,r){return i(),e("div",null,a[0]||(a[0]=[t('<h1 id="多表查询" tabindex="-1">多表查询 <a class="header-anchor" href="#多表查询" aria-label="Permalink to &quot;多表查询&quot;">​</a></h1><p>有时候往往不会在一张表存储所有信息，而是需要分表存储。那么查询的时候就需要多表查询数据。</p><h2 id="表关系" tabindex="-1">表关系 <a class="header-anchor" href="#表关系" aria-label="Permalink to &quot;表关系&quot;">​</a></h2><h4 id="一对一关系" tabindex="-1">一对一关系 <a class="header-anchor" href="#一对一关系" aria-label="Permalink to &quot;一对一关系&quot;">​</a></h4><p>一张表A的一条记录只能对应一张表B中的一条记录，另一张表B中的一条记录也只能对于表A中的一条记录。</p><h4 id="一对多关系" tabindex="-1">一对多关系 <a class="header-anchor" href="#一对多关系" aria-label="Permalink to &quot;一对多关系&quot;">​</a></h4><p>一张表A中的一条记录可以对应另一张表B的多条记录，另一张表B中的一条记录只能对于表A中的一条记录。</p><h4 id="多对多关系" tabindex="-1">多对多关系 <a class="header-anchor" href="#多对多关系" aria-label="Permalink to &quot;多对多关系&quot;">​</a></h4><p>一张表A中的一条记录可以对应另一张表B的多条记录，另一张表B的一条记录也可以对应表A中的多条记录。</p><p>当表关系为多对多时，通常需要一个第三方表（关系表）来记录存在多对多关系的表的外键。</p><h2 id="inner-join" tabindex="-1">INNER JOIN <a class="header-anchor" href="#inner-join" aria-label="Permalink to &quot;INNER JOIN&quot;">​</a></h2><p>关联表查询：</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM stu AS s INNER JOIN class AS c ON s.id = c.id</span></span></code></pre></div><p>可以关联多个表，但是这些表之间要存在关联关系</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT c.id,count(*) FROM stu AS s INNER JOIN class AS c ON s.`class_id` = c.id INNER JOIN `article` AS a ON s.id = a.`stu_id` GROUP BY c.id</span></span></code></pre></div><h2 id="outer-join" tabindex="-1">OUTER JOIN <a class="header-anchor" href="#outer-join" aria-label="Permalink to &quot;OUTER JOIN&quot;">​</a></h2><p>外链接。</p><h4 id="left-join" tabindex="-1">LEFT JOIN <a class="header-anchor" href="#left-join" aria-label="Permalink to &quot;LEFT JOIN&quot;">​</a></h4><p><code>LEFT JOIN</code>可以理解为查询出来的数据一定会包含左侧表的所有数据。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM stu AS s LEFT JOIN stu_info AS si ON s.id = si.`stu_id` where si.qq IS NULL</span></span></code></pre></div><h4 id="right-join" tabindex="-1">RIGHT JOIN <a class="header-anchor" href="#right-join" aria-label="Permalink to &quot;RIGHT JOIN&quot;">​</a></h4><p><code>RIGHT JOIN</code>可以理解为查询出来的数据一定会包含右侧表的所有数据。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT c.cname FROM stu AS s RIGHT JOIN class AS c ON s.`class_id` = c.id WHERE s.id IS NULL</span></span></code></pre></div><h2 id="self-join" tabindex="-1">SELF JOIN <a class="header-anchor" href="#self-join" aria-label="Permalink to &quot;SELF JOIN&quot;">​</a></h2><p>自链接。</p><p><code>SELF JOIN</code>为自连接即表与自身进行关联。虽然自连接的两张表都是同一张表，但也把它按两张表对待，这样理解就会容易些。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM stu AS s1 INNER JOIN stu AS s2 ON s1.`class_id` = s2.`class_id` WHERE s1.sname = &quot;Eddie&quot; AND s2.sname != &quot;Eddie&quot;;</span></span></code></pre></div>',27)]))}const b=s(l,[["render",n]]);export{u as __pageData,b as default};
